{"version":3,"sources":["investigator.js","src/ui/logsList.js","src/ui/logDetails.js","src/ui/tree.js","src/ui/inspector.js","src/ui/index.js","src/ui/logItem.js","src/agent.js","src/investigator.js"],"names":[],"mappings":"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","file":"investigator.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('transceiver'), require('blessed'), require('dateformat'), require('json-prune'), require('path'), require('app-root-path'), require('shortid'), require('stack-trace')) :\n  typeof define === 'function' && define.amd ? define(['transceiver', 'blessed', 'dateformat', 'json-prune', 'path', 'app-root-path', 'shortid', 'stack-trace'], factory) :\n  global.investigator = factory(global.transceiver, global.blessed, global.dateFormat, global.prune, global.path, global.appRoot, global.shortid, global.stack_trace)\n}(this, function (transceiver, blessed, dateFormat, prune, path, appRoot, shortid, stack_trace) { 'use strict';\n\n  class LogsList {\n    constructor() {\n      this.selectedLog = null;\n      this.logs = {};\n      this.logsCount = 0;\n      this.channel = transceiver.channel('log');\n      this.autoScroll = true;\n      this.element = blessed.list({\n        top: '0',\n        left: '0',\n        bottom: 7,\n        tags: true,\n        keys: true,\n        mouse: true,\n        scrollbar: {\n          bg: 'magenta',\n        },\n        style: {\n          selected: {\n            fg: 'black',\n            bg: 'white',\n          }\n        }\n      });\n\n      this.element.key(['up', 'down', 's', 'b'], (ch, key) => {\n        if (key.name === 's') {\n          this.autoScroll = !this.autoScroll;\n        } else if (key.name === 'b') {\n          this.scrollToBottom();\n          transceiver.request('ui', 'render');\n        } else {\n          this.autoScroll = false;\n        }\n      });\n\n      this.element.on('select item', (element, i) => {\n        this.selectedLog = this.getLogFromElement(element);\n        if (this.selectedLog) {\n          this.channel.emit('select log', this.selectedLog);\n        }\n      });\n\n      this.channel.reply({\n        addLog: this.addLog,\n        getSelectedLog: this.getSelectedLog,\n      }, this);\n    }\n\n    addLog(log) {\n      let element;\n\n      this.logs[log.id] = log;\n      this.logsCount++;\n\n      if (log.parent) {\n        const index = this.element.getItemIndex(log.parent.element) + log.parent.getChildren().length;\n        this.element.insertItem(index, log.render());\n        element = this.element.getItem(index);\n      } else {\n        element = this.element.add(log.render());\n      }\n      element.logId = log.id;\n      if (this.autoScroll) {\n        this.scrollToBottom();\n      }\n      if (this.logsCount === 1) {\n        this.channel.emit('select log', log);\n      }\n      return element;\n    }\n\n    getSelectedLog() {\n      return this.selectedLog;\n    }\n\n    scrollToBottom() {\n      this.element.move(this.logsCount);\n    }\n\n    getLogFromElement(element) {\n      return this.logs[element.logId];\n    }\n\n    focus() {\n      this.element.focus();\n    }\n  }\n\n  class logDetails {\n    constructor() {\n      this.channel = transceiver.channel('log');\n      this.element = blessed.box({\n        height: 6,\n        left: '0',\n        bottom: 0,\n        tags: true,\n        keys: true,\n        padding: {\n          left: 1,\n          right: 1,\n        },\n        style: {\n          selected: {\n            fg: 'black',\n            bg: 'white',\n            border: {\n              fg: 'white'\n            },\n            hover: {\n              bg: 'green'\n            }\n          }\n        }\n      });\n\n      this.channel.on('select log', this.updateLogDetails.bind(this));\n    }\n\n    updateLogDetails(log) {\n      this.element.setContent(this.renderType(log) + this.renderId(log) + this.renderDate(log) + this.renderDuration(log) + this.renderData(log));\n    }\n\n    renderType(log) {\n      if (log.type === 'root') {\n        return '{magenta-fg}{bold}ROOT NODE{/bold}{/magenta-fg}\\n';\n      }\n      if (log.type === 'success') {\n        return '{green-fg}✔ {bold}SUCCESS{/bold}{/green-fg}\\n';\n      }\n      if (log.type === 'error') {\n        return '{red-fg}✘ {bold}ERROR{/bold}{/red-fg}\\n';\n      }\n      if (log.type === 'warn') {\n        return '{yellow-fg}! {bold}WARN{/bold}{/red-fg}\\n';\n      }\n      if (log.type === 'node') {\n        return '{grey-fg}{bold}NODE{/bold}{/grey-fg}\\n';\n      }\n      if (log.type === 'async') {\n        if (log.status === 'resolved') {\n          return '{bold}{green-fg}ASYNC NODE{/bold} (RESOLVED ✔){/green-fg}\\n';\n        }\n        if (log.status === 'rejected') {\n          return '{bold}{red-fg}ASYNC NODE{/bold} (REJECTED ✘){/red-fg}\\n';\n        }\n        if (log.status === 'pending') {\n          return '{cyan-fg}{bold}ASYNC NODE{/bold} (PENDING ⌛){/cyan-fg}\\n';\n        }\n      }\n      if (log.type === 'info') {\n        return '{white-fg}{bold}INFO{/bold}{/white-fg}\\n';\n      }\n      return '';\n    }\n\n    renderId(log) {\n      return `{bold}ID:{/bold} {underline}${log.id}{/underline}\\n`;\n    }\n\n    renderDate(log) {\n      return `{bold}TIME:{/bold} {magenta-fg}${dateFormat(log.date, 'dddd, mmmm dS yyyy, HH:MM:ss.L')}{/magenta-fg}\\n`;\n    }\n\n    renderDuration(log) {\n      if (log.relativeDuration && log.previousLog) {\n        return `{bold}DURATION:{/bold} {yellow-fg}${log.relativeDuration}{/yellow-fg} (from {underline}${log.previousLog.id}{/underline})\\n`;\n      }\n      return '';\n    }\n\n    renderData(log) {\n      if (log.data) {\n        return `{bold}DATA:{/bold} ${log.renderData()}\\n`;\n      }\n      return '';\n    }\n  }\n\n  // https://github.com/yaronn/blessed-contrib/blob/master/lib/widget/tree.js\n  const Node = blessed.Node;\n  const Box = blessed.Box;\n\n  function Tree(options) {\n\n    if (!(this instanceof Node)) {\n      return new Tree(options);\n    }\n\n    options = options || {};\n    options.bold = true;\n    var self = this;\n    this.options = options;\n    this.data = {};\n    this.nodeLines = [];\n    this.lineNbr = 0;\n    Box.call(this, options);\n\n    options.extended = options.extended || false;\n    options.keys = options.keys || ['space','enter'];\n\n    options.template = options.template || {};\n    options.template.extend = options.template.extend || ' [+]';\n    options.template.retract = options.template.retract || ' [-]';\n    options.template.lines = options.template.lines || false;\n\n    this.rows = blessed.list({\n      height: 0,\n      top: 1,\n      width: 0,\n      left: 1,\n      selectedFg: 'black',\n      selectedBg: 'white',\n      keys: true,\n      tags: true,\n    });\n\n    this.rows.key(options.keys,function() {\n      self.nodeLines[this.getItemIndex(this.selected)].extended = !self.nodeLines[this.getItemIndex(this.selected)].extended;\n      self.setData(self.data);\n      self.screen.render();\n\n      self.emit('select',self.nodeLines[this.getItemIndex(this.selected)]);\n    });\n\n    this.append(this.rows);\n  }\n\n  Tree.prototype.walk = function(node, treeDepth) {\n    var lines = [];\n\n    if (!node.parent) {\n      node.parent = null;\n    }\n\n    if (treeDepth == '' && node.name) {\n      this.lineNbr = 0;\n      this.nodeLines[this.lineNbr++] = node;\n      lines.push(node.name);\n      treeDepth = ' ';\n    }\n\n    node.depth = treeDepth.length - 1;\n\n    if (node.children && node.extended) {\n\n      var i = 0;\n\n      if (typeof node.children == 'function') {\n        node.childrenContent = node.children(node);\n      }\n\n      if (!node.childrenContent) {\n        node.childrenContent = node.children;\n      }\n\n      for (var child in node.childrenContent) {\n\n        if (!node.childrenContent[child].name) {\n          node.childrenContent[child].name = child;\n        }\n\n        var childIndex = child;\n        child = node.childrenContent[child];\n        child.parent = node;\n        child.position = i++;\n\n        if (typeof child.extended == 'undefined') {\n          child.extended = this.options.extended;\n        }\n\n        if (typeof child.children == 'function') {\n          child.childrenContent = child.children(child);\n        } else {\n          child.childrenContent = child.children;\n        }\n\n        var isLastChild = child.position == Object.keys(child.parent.childrenContent).length - 1;\n        var tree;\n        var suffix = '';\n        if (isLastChild) {\n          tree = '└';\n        } else {\n          tree = '├';\n        }\n        if (!child.childrenContent || Object.keys(child.childrenContent).length == 0) {\n          tree += '─';\n        } else if (child.extended) {\n          tree += '┬';\n          suffix = this.options.template.retract;\n        } else {\n          tree += '─';\n          suffix = this.options.template.extend;\n        }\n\n        if (!this.options.template.lines) {\n          tree = '|-';\n        }\n\n        lines.push(treeDepth + tree + child.name + suffix);\n\n        this.nodeLines[this.lineNbr++] = child;\n\n        var parentTree;\n        if (isLastChild || !this.options.template.lines) {\n          parentTree = treeDepth + ' ';\n        } else {\n          parentTree = treeDepth + '│';\n        }\n        lines = lines.concat(this.walk(child, parentTree));\n      }\n    }\n    return lines;\n  };\n\n  Tree.prototype.focus = function() {\n    this.rows.focus();\n  };\n\n  Tree.prototype.render = function() {\n    if (this.screen.focused == this.rows) {\n      this.rows.focus();\n    }\n\n    this.rows.width = this.width - 3;\n    this.rows.height = this.height - 3;\n    Box.prototype.render.call(this);\n  };\n\n  Tree.prototype.setData = function(data) {\n\n    var formatted = [];\n    formatted = this.walk(data,'');\n\n    this.data = data;\n    this.rows.setItems(formatted);\n  };\n\n  Tree.prototype.__proto__ = Box.prototype;\n\n  Tree.prototype.type = 'tree';\n\n  var ui_tree = Tree;\n\n  class Inspector {\n    constructor() {\n      this.channel = transceiver.channel('log');\n\n      this.element = ui_tree({\n        top: 'center',\n        left: 'center',\n        width: '90%',\n        height: '75%',\n        hidden: true,\n        label: 'Inspector',\n        tags: true,\n        border: {\n          type: 'line'\n        },\n        style: {\n          fg: 'white',\n          border: {\n            fg: '#f0f0f0'\n          },\n        },\n        template: {\n          extend: '{bold}{green-fg} [+]{/}',\n          retract: '{bold}{yellow-fg} [-]{/}',\n          lines: true,\n        }\n      });\n    }\n\n    open(selectedLog) {\n      if (!selectedLog || !selectedLog.data && !selectedLog.stackTrace) {\n        return;\n      }\n      this.opened = true;\n      this.element.show();\n      this.element.focus();\n      this.element.setData(this.prepareData(selectedLog));\n    }\n\n    close() {\n      this.opened = false;\n      this.element.hide();\n    }\n\n    prepareData(log) {\n      const content = {};\n      if (log.data) {\n        content.data = JSON.parse(prune(log.data, {\n          depthDecr: 7,\n          replacer: (value, defaultValue, circular) => {\n            if (typeof value === 'function') {\n              return '\"Function [pruned]\"';\n            }\n            if (Array.isArray(value)) {\n              return `\"Array (${value.length}) [pruned]\"`;\n            }\n            if (typeof value === 'object') {\n              return '\"Object [pruned]\"';\n            }\n            return defaultValue;\n          }\n        }));\n      }\n\n      if (log.stackTrace) {\n        content['stack trace'] = log.stackTrace.map((callsite) => {\n          const relativePath = path.relative(appRoot.toString(), callsite.file);\n          return {\n            type: callsite.type,\n            function: callsite.function,\n            method: callsite.method,\n            file: `${relativePath}:{yellow-fg}${callsite.line}{/yellow-fg}:{yellow-fg}${callsite.column}{/yellow-fg}`,\n          };\n        });\n      }\n      return this.formatData(content);\n    }\n\n    formatData(data, key, depth = 0) {\n      depth++;\n      if (typeof data === 'object') {\n        if (data !== null) {\n          let name;\n          let extended;\n\n          if (depth === 2) {\n            name = `{yellow-fg}{bold}${key.toUpperCase()}{/bold}{/yellow-fg} {magenta-fg}(${data.length}){/magenta-fg}`;\n            extended = key === 'data';\n          } else {\n            const type = (Array.isArray(data) ? `[Array] {magenta-fg}(${data.length}){/magenta-fg}` : '[Object]');\n            name = `{blue-fg}{bold}${key ? key + ' ' : ''}{/bold}${type}{/blue-fg}`;\n            extended = depth < 4;\n          }\n          const newObj = {\n            children: {},\n            name,\n            extended\n          };\n          Object.keys(data).forEach((key) => {\n            const child = this.formatData(data[key], key, depth);\n            if (child) {\n              newObj.children[key] = child;\n            }\n          });\n          return newObj;\n        }\n      }\n      if (typeof data === 'function') {\n        return {\n          name: `{blue-fg}${key}{/blue-fg}: {red-fg}{bold}[Function]{/}`,\n        };\n      }\n      if (typeof data === 'number') {\n        return {\n          name: `{blue-fg}${key}{/blue-fg}: {yellow-fg}${data}{/}`,\n        };\n      }\n      if (data === null) {\n        return {\n          name: `{blue-fg}${key}{/blue-fg}: {cyan-fg}{bold}null{/}`,\n        };\n      }\n      return {\n        name: `{blue-fg}${key}{/blue-fg}: ${data}`,\n      };\n    }\n  }\n\n  class Ui {\n    constructor() {\n      this.channel = transceiver.channel('ui');\n      this.screen = blessed.screen({\n        smartCSR: true\n      });\n\n      this.logsList = new LogsList();\n      this.logDetails = new logDetails();\n      this.inspector = new Inspector();\n\n      this.separator = blessed.line({\n        bottom: 6,\n        orientation: 'horizontal'\n      });\n\n      this.screen.append(this.logsList.element);\n      this.screen.append(this.logDetails.element);\n      this.screen.append(this.separator);\n      this.screen.append(this.inspector.element);\n\n      this.logsList.element.focus();\n\n      this.screen.key(['q', 'C-c'], function(ch, key) {\n        return process.exit(0);\n      });\n\n      this.screen.key(['i'], this.toggleInspector.bind(this));\n\n      this.screen.render();\n\n      this.channel.reply('render', () => this.screen.render());\n    }\n\n    toggleInspector() {\n      if (this.inspector.opened) {\n        this.inspector.close();\n        this.logsList.focus();\n      } else {\n        this.inspector.open(this.logsList.selectedLog);\n      }\n      this.screen.render();\n    }\n  }\n\n  class LogItem {\n    constructor({name, type, status, parent, data, message, stackTrace, date = Date.now()}) {\n      this.id = shortid.generate();\n      this.name = name;\n      this.type = type;\n      this.status = status;\n      this.data = data;\n      this.message = message;\n      this.stackTrace = stackTrace;\n      this.date = date;\n      this.children = [];\n      this.channel = transceiver.channel('log');\n\n      if (parent) {\n        this.depth = parent.depth + 1;\n        this.parent = parent;\n        this.previousLog = parent.getLastChild() || parent;\n        this.relativeDuration = this.getRelativeDuration();\n        this.parent.addChild(this);\n      } else {\n        this.depth = 0;\n      }\n      this.element = this.channel.request('addLog', this);\n      this.update();\n    }\n\n    update() {\n      if (this.element) {\n        this.element.content = this.render();\n        transceiver.request('ui', 'render');\n      }\n    }\n\n    render() {\n      let message = `${this.renderState()}${this.renderName()}${this.renderMessage()}${this.renderData()}${this.renderDate()}${this.renderDuration()}`;\n      for (let i = 0; i < this.depth; i++) {\n        message = '    ' + message;\n      }\n      return message;\n    }\n\n    renderState() {\n      if (this.type === 'async' && this.status === 'pending') {\n        return `{cyan-fg}[⌛]{/cyan-fg} `;\n      }\n      if (this.type === 'async' && this.status === 'resolved') {\n        return `{green-fg}[✔]{/green-fg} `;\n      }\n      if (this.type === 'async' && this.status === 'rejected') {\n        return `{red-fg}[✘]{/red-fg} `;\n      }\n      if (this.type === 'success') {\n        return `{green-fg}✔{/green-fg} `;\n      }\n      if (this.type === 'error') {\n        return `{red-fg}✘{/red-fg} `;\n      }\n      if (this.type === 'warn') {\n        return `{yellow-fg}❗{/yellow-fg} `;\n      }\n      if (this.type === 'info') {\n        return '⇢ ';\n      }\n      return '';\n    }\n\n    renderName() {\n      if (this.depth === 0) {\n        return this.name ? `{underline}{bold}${this.name}{/bold}{/underline} ` : '';\n      }\n      if (this.type === 'async') {\n        if (this.status === 'resolved') {\n          return `{bold}{green-fg}${this.name}{/green-fg}{/bold} (async) `;\n        }\n        if (this.status === 'rejected') {\n          return `{bold}{red-fg}${this.name}{/red-fg}{/bold} (async) `;\n        }\n        return `{bold}${this.name}{/bold} (async) `;\n      }\n      if (this.type === 'success') {\n        return this.name ? `{bold}{green-fg}${this.name}{/green-fg}{/bold} ` : '';\n      }\n      if (this.type === 'error') {\n        return this.name ? `{bold}{red-fg}${this.name}{/red-fg}{/bold} ` : '';\n      }\n      if (this.type === 'warn') {\n        return this.name ? `{bold}{yellow-fg}${this.name}{/yellow-fg}{/bold} ` : '';\n      }\n      return this.name ? `{bold}${this.name}{/bold} ` : '';\n    }\n\n    renderData() {\n      if (this.depth === 0) {\n        // console.log(this.data);\n      }\n      if (!this.data) {\n        return '';\n      }\n      if (Array.isArray(this.data)) {\n        return this.data.map(this.renderValue.bind(this)).join(' ') + ' ';\n      }\n      return this.renderValue(this.data) + ' ';\n    }\n\n    renderValue(value) {\n      if (Array.isArray(value)) {\n        return `{cyan-fg}${this.prune(value)}{/cyan-fg}`;\n      }\n      if (typeof value === 'object') {\n        return `{blue-fg}${this.prune(value)}{/blue-fg}`;\n      }\n      if (typeof value === 'function') {\n        return `{red-fg}{bold}[Function]{/bold}{red-fg}`;\n      }\n      if (typeof value === 'number') {\n        return `{yellow-fg}${value}{/yellow-fg}`;\n      }\n      if (typeof value === 'string') {\n        if (this.type === 'success') {\n          return `{green-fg}${value}{/green-fg}`;\n        }\n        if (this.type === 'error') {\n          return `{red-fg}${value}{/red-fg}`;\n        }\n        if (this.type === 'warn') {\n          return `{yellow-fg}${value}{/yellow-fg}`;\n        }\n      }\n      return value;\n    }\n\n    renderMessage() {\n      if (this.message) {\n        if (this.type === 'success') {\n          return `{green-fg}${this.message}{/green-fg} `;\n        }\n        if (this.type === 'error') {\n          return `{red-fg}${this.message}{/red-fg} `;\n        }\n        if (this.type === 'warn') {\n          return `{yellow-fg}${this.message}{/yellow-fg} `;\n        }\n        return `${this.message} `;\n      }\n      return '';\n    }\n\n    renderDate() {\n      if (this.depth === 0) {\n        return `{magenta-fg}(${dateFormat(this.date, 'dd/mm/yyyy HH:MM:ss.L')}){/magenta-fg} `;\n      }\n      return '';\n    }\n\n    renderDuration() {\n      if (this.relativeDuration) {\n        return `{grey-fg}+${this.relativeDuration}{/grey-fg} `;\n      }\n      return '';\n    }\n\n    getRelativeDuration() {\n      return this.humanizeDuration(this.date - this.previousLog.date);\n    }\n\n    humanizeDuration(duration) {\n      if (duration < 1000) {\n        return `${duration}ms`;\n      }\n      if (duration < 60000) {\n        let milliseconds = duration % 1000;\n        milliseconds = ('000' + milliseconds).slice(-3);\n        return `${Math.floor(duration / 1000)}.${milliseconds}s`;\n      }\n      return `${Math.floor(duration / 60000)}m ${Math.round((duration % 60000) / 1000)}s`;\n    }\n\n    addChild(log) {\n      this.children.push(log);\n    }\n\n    getLastChild() {\n      return this.children[this.children.length - 1];\n    }\n\n    getChildren(list) {\n      list = list || [];\n      list.push.apply(list, this.children);\n      this.children.forEach(child => {\n        child.getChildren(list);\n      });\n      return list;\n    }\n\n    setStatus(status) {\n      this.status = status;\n      this.update();\n    }\n\n    prune(value) {\n      return prune(value, {\n        depthDecr: 2,\n        arrayMaxLength: 8,\n        prunedString: ' [...]'\n      });\n    }\n  }\n\n  class Agent {\n    constructor({name, type, status, data, message, isAsync = false, ancestors}) {\n      this.name = name;\n      this.children = {};\n      this.isAsync = isAsync;\n      this.asyncState = this.isAsync ? 'pending' : null;\n      this.type = type;\n      this.status = status;\n\n      if (!ancestors) {\n        this.ancestors = [];\n        this.isRoot = true;\n      } else {\n        this.ancestors = ancestors;\n        this.parent = this.ancestors[this.ancestors.length - 1];\n      }\n\n      this.logItem = new LogItem({\n        name: this.name,\n        type: this.type,\n        status: this.status,\n        parent: this.parent ? this.parent.logItem : null,\n        data: data,\n        message: message,\n        stackTrace: this.generateStackTrace(stack_trace.get()),\n      });\n\n      return this;\n    }\n\n    log(...args) {\n      new Agent({\n        type: 'info',\n        data: args,\n        ancestors: this.ancestors.concat(this)\n      });\n      return this;\n    }\n\n    warn(...args) {\n      new Agent({\n        type: 'warn',\n        data: args,\n        ancestors: this.ancestors.concat(this)\n      });\n      return this;\n    }\n\n    success(...args) {\n      new Agent({\n        type: 'success',\n        data: args,\n        ancestors: this.ancestors.concat(this),\n      });\n      return this;\n    }\n\n    error(...args) {\n      new Agent({\n        type: 'error',\n        data: args,\n        ancestors: this.ancestors.concat(this),\n      });\n      return this;\n    }\n\n    child(name, ...args) {\n      if (!this.children[name]) {\n        this.children[name] = new Agent({\n          name,\n          type: 'node',\n          ancestors: this.ancestors.concat(this),\n        });\n      }\n      if (args.length) {\n        this.children[name].log(...args);\n      }\n      return this.children[name];\n    }\n\n    async(name, ...args) {\n      if (!this.children[name]) {\n        this.children[name] = new Agent({\n          name,\n          type: 'async',\n          status: 'pending',\n          isAsync: true,\n          ancestors: this.ancestors.concat(this),\n        });\n      }\n      if (!this.children[name].isAsync) {\n        this.internalWarn(`Child agent {bold}${name}{/bold} is defined as a non async agent`);\n      }\n      if (args.length) {\n        this.children[name].log(...args);\n      }\n      return this.children[name];\n    }\n\n    resolve(...args) {\n      if (this.isAsync) {\n        if (this.logItem.status === 'pending') {\n          this.logItem.setStatus('resolved');\n          const resolveLog = new Agent({\n            name: this.name,\n            type: 'success',\n            message: 'resolved',\n            ancestors: this.ancestors.concat(this),\n          });\n          if (args.length) {\n            resolveLog.success(...args);\n          }\n        } else {\n          this.internalWarn(`Trying to resolve an already {bold}${this.logItem.status}{/bold} async agent`);\n        }\n      } else {\n        this.internalWarn('Trying to resolve a non async agent');\n      }\n      return this;\n    }\n\n    reject(...args) {\n      if (this.isAsync) {\n        if (this.logItem.status === 'pending') {\n          this.logItem.setStatus('rejected');\n          const rejectLog = new Agent({\n            name: this.name,\n            type: 'error',\n            message: 'rejected',\n            ancestors: this.ancestors.concat(this),\n          });\n          if (args.length) {\n            rejectLog.error(...args);\n          }\n        } else {\n          this.internalWarn(`Trying to reject an already {bold}${this.logItem.status}{/bold} async agent`);\n        }\n      } else {\n        this.internalWarn('Trying to reject a non async agent');\n      }\n      return this;\n    }\n\n    internalWarn(message) {\n      new Agent({\n        name: this.name,\n        type: 'warn',\n        message,\n        ancestors: this.ancestors.concat(this),\n      });\n    }\n\n    getAncestorsNames() {\n      return this.ancestors.map(ancestor => ancestor.name);\n    }\n\n    generateStackTrace(trace) {\n      const stackTrace = [];\n      for (let i = 0; i < 5; i++) {\n        stackTrace.push({\n          type: trace[i].getTypeName(),\n          function: trace[i].getFunctionName(),\n          method: trace[i].getMethodName(),\n          file: trace[i].getFileName(),\n          line: trace[i].getLineNumber(),\n          column: trace[i].getColumnNumber(),\n        });\n      }\n      return stackTrace;\n    }\n  }\n\n  var agent = function(name, ...args) {\n    return new Agent({\n      name,\n      type: 'root',\n      data: args.length ? args : undefined,\n    });\n  };\n\n  transceiver.setPromise(null);\n\n  const ui = new Ui();\n\n  var investigator = {ui, agent};\n\n  return investigator;\n\n}));\n","import blessed from 'blessed';\nimport transceiver from 'transceiver';\n\nexport default class LogsList {\n  constructor() {\n    this.selectedLog = null;\n    this.logs = {};\n    this.logsCount = 0;\n    this.channel = transceiver.channel('log');\n    this.autoScroll = true;\n    this.element = blessed.list({\n      top: '0',\n      left: '0',\n      bottom: 7,\n      tags: true,\n      keys: true,\n      mouse: true,\n      scrollbar: {\n        bg: 'magenta',\n      },\n      style: {\n        selected: {\n          fg: 'black',\n          bg: 'white',\n        }\n      }\n    });\n\n    this.element.key(['up', 'down', 's', 'b'], (ch, key) => {\n      if (key.name === 's') {\n        this.autoScroll = !this.autoScroll;\n      } else if (key.name === 'b') {\n        this.scrollToBottom();\n        transceiver.request('ui', 'render');\n      } else {\n        this.autoScroll = false;\n      }\n    });\n\n    this.element.on('select item', (element, i) => {\n      this.selectedLog = this.getLogFromElement(element);\n      if (this.selectedLog) {\n        this.channel.emit('select log', this.selectedLog);\n      }\n    });\n\n    this.channel.reply({\n      addLog: this.addLog,\n      getSelectedLog: this.getSelectedLog,\n    }, this);\n  }\n\n  addLog(log) {\n    let element;\n\n    this.logs[log.id] = log;\n    this.logsCount++;\n\n    if (log.parent) {\n      const index = this.element.getItemIndex(log.parent.element) + log.parent.getChildren().length;\n      this.element.insertItem(index, log.render());\n      element = this.element.getItem(index);\n    } else {\n      element = this.element.add(log.render());\n    }\n    element.logId = log.id;\n    if (this.autoScroll) {\n      this.scrollToBottom();\n    }\n    if (this.logsCount === 1) {\n      this.channel.emit('select log', log);\n    }\n    return element;\n  }\n\n  getSelectedLog() {\n    return this.selectedLog;\n  }\n\n  scrollToBottom() {\n    this.element.move(this.logsCount);\n  }\n\n  getLogFromElement(element) {\n    return this.logs[element.logId];\n  }\n\n  focus() {\n    this.element.focus();\n  }\n}\n","import blessed from 'blessed';\nimport transceiver from 'transceiver';\nimport dateFormat from 'dateformat';\n\nexport default class logDetails {\n  constructor() {\n    this.channel = transceiver.channel('log');\n    this.element = blessed.box({\n      height: 6,\n      left: '0',\n      bottom: 0,\n      tags: true,\n      keys: true,\n      padding: {\n        left: 1,\n        right: 1,\n      },\n      style: {\n        selected: {\n          fg: 'black',\n          bg: 'white',\n          border: {\n            fg: 'white'\n          },\n          hover: {\n            bg: 'green'\n          }\n        }\n      }\n    });\n\n    this.channel.on('select log', this.updateLogDetails.bind(this));\n  }\n\n  updateLogDetails(log) {\n    this.element.setContent(this.renderType(log) + this.renderId(log) + this.renderDate(log) + this.renderDuration(log) + this.renderData(log));\n  }\n\n  renderType(log) {\n    if (log.type === 'root') {\n      return '{magenta-fg}{bold}ROOT NODE{/bold}{/magenta-fg}\\n';\n    }\n    if (log.type === 'success') {\n      return '{green-fg}✔ {bold}SUCCESS{/bold}{/green-fg}\\n';\n    }\n    if (log.type === 'error') {\n      return '{red-fg}✘ {bold}ERROR{/bold}{/red-fg}\\n';\n    }\n    if (log.type === 'warn') {\n      return '{yellow-fg}! {bold}WARN{/bold}{/red-fg}\\n';\n    }\n    if (log.type === 'node') {\n      return '{grey-fg}{bold}NODE{/bold}{/grey-fg}\\n';\n    }\n    if (log.type === 'async') {\n      if (log.status === 'resolved') {\n        return '{bold}{green-fg}ASYNC NODE{/bold} (RESOLVED ✔){/green-fg}\\n';\n      }\n      if (log.status === 'rejected') {\n        return '{bold}{red-fg}ASYNC NODE{/bold} (REJECTED ✘){/red-fg}\\n';\n      }\n      if (log.status === 'pending') {\n        return '{cyan-fg}{bold}ASYNC NODE{/bold} (PENDING ⌛){/cyan-fg}\\n';\n      }\n    }\n    if (log.type === 'info') {\n      return '{white-fg}{bold}INFO{/bold}{/white-fg}\\n';\n    }\n    return '';\n  }\n\n  renderId(log) {\n    return `{bold}ID:{/bold} {underline}${log.id}{/underline}\\n`;\n  }\n\n  renderDate(log) {\n    return `{bold}TIME:{/bold} {magenta-fg}${dateFormat(log.date, 'dddd, mmmm dS yyyy, HH:MM:ss.L')}{/magenta-fg}\\n`;\n  }\n\n  renderDuration(log) {\n    if (log.relativeDuration && log.previousLog) {\n      return `{bold}DURATION:{/bold} {yellow-fg}${log.relativeDuration}{/yellow-fg} (from {underline}${log.previousLog.id}{/underline})\\n`;\n    }\n    return '';\n  }\n\n  renderData(log) {\n    if (log.data) {\n      return `{bold}DATA:{/bold} ${log.renderData()}\\n`;\n    }\n    return '';\n  }\n}\n","// https://github.com/yaronn/blessed-contrib/blob/master/lib/widget/tree.js\nimport blessed from 'blessed';\n\nconst Node = blessed.Node;\nconst Box = blessed.Box;\n\nfunction Tree(options) {\n\n  if (!(this instanceof Node)) {\n    return new Tree(options);\n  }\n\n  options = options || {};\n  options.bold = true;\n  var self = this;\n  this.options = options;\n  this.data = {};\n  this.nodeLines = [];\n  this.lineNbr = 0;\n  Box.call(this, options);\n\n  options.extended = options.extended || false;\n  options.keys = options.keys || ['space','enter'];\n\n  options.template = options.template || {};\n  options.template.extend = options.template.extend || ' [+]';\n  options.template.retract = options.template.retract || ' [-]';\n  options.template.lines = options.template.lines || false;\n\n  this.rows = blessed.list({\n    height: 0,\n    top: 1,\n    width: 0,\n    left: 1,\n    selectedFg: 'black',\n    selectedBg: 'white',\n    keys: true,\n    tags: true,\n  });\n\n  this.rows.key(options.keys,function() {\n    self.nodeLines[this.getItemIndex(this.selected)].extended = !self.nodeLines[this.getItemIndex(this.selected)].extended;\n    self.setData(self.data);\n    self.screen.render();\n\n    self.emit('select',self.nodeLines[this.getItemIndex(this.selected)]);\n  });\n\n  this.append(this.rows);\n}\n\nTree.prototype.walk = function(node, treeDepth) {\n  var lines = [];\n\n  if (!node.parent) {\n    node.parent = null;\n  }\n\n  if (treeDepth == '' && node.name) {\n    this.lineNbr = 0;\n    this.nodeLines[this.lineNbr++] = node;\n    lines.push(node.name);\n    treeDepth = ' ';\n  }\n\n  node.depth = treeDepth.length - 1;\n\n  if (node.children && node.extended) {\n\n    var i = 0;\n\n    if (typeof node.children == 'function') {\n      node.childrenContent = node.children(node);\n    }\n\n    if (!node.childrenContent) {\n      node.childrenContent = node.children;\n    }\n\n    for (var child in node.childrenContent) {\n\n      if (!node.childrenContent[child].name) {\n        node.childrenContent[child].name = child;\n      }\n\n      var childIndex = child;\n      child = node.childrenContent[child];\n      child.parent = node;\n      child.position = i++;\n\n      if (typeof child.extended == 'undefined') {\n        child.extended = this.options.extended;\n      }\n\n      if (typeof child.children == 'function') {\n        child.childrenContent = child.children(child);\n      } else {\n        child.childrenContent = child.children;\n      }\n\n      var isLastChild = child.position == Object.keys(child.parent.childrenContent).length - 1;\n      var tree;\n      var suffix = '';\n      if (isLastChild) {\n        tree = '└';\n      } else {\n        tree = '├';\n      }\n      if (!child.childrenContent || Object.keys(child.childrenContent).length == 0) {\n        tree += '─';\n      } else if (child.extended) {\n        tree += '┬';\n        suffix = this.options.template.retract;\n      } else {\n        tree += '─';\n        suffix = this.options.template.extend;\n      }\n\n      if (!this.options.template.lines) {\n        tree = '|-';\n      }\n\n      lines.push(treeDepth + tree + child.name + suffix);\n\n      this.nodeLines[this.lineNbr++] = child;\n\n      var parentTree;\n      if (isLastChild || !this.options.template.lines) {\n        parentTree = treeDepth + ' ';\n      } else {\n        parentTree = treeDepth + '│';\n      }\n      lines = lines.concat(this.walk(child, parentTree));\n    }\n  }\n  return lines;\n};\n\nTree.prototype.focus = function() {\n  this.rows.focus();\n};\n\nTree.prototype.render = function() {\n  if (this.screen.focused == this.rows) {\n    this.rows.focus();\n  }\n\n  this.rows.width = this.width - 3;\n  this.rows.height = this.height - 3;\n  Box.prototype.render.call(this);\n};\n\nTree.prototype.setData = function(data) {\n\n  var formatted = [];\n  formatted = this.walk(data,'');\n\n  this.data = data;\n  this.rows.setItems(formatted);\n};\n\nTree.prototype.__proto__ = Box.prototype;\n\nTree.prototype.type = 'tree';\n\nexport default Tree;\n","import blessed from 'blessed';\nimport transceiver from 'transceiver';\nimport prune from 'json-prune';\nimport path from 'path';\nimport appRoot from 'app-root-path';\n\nimport tree from './tree';\n\nexport default class Inspector {\n  constructor() {\n    this.channel = transceiver.channel('log');\n\n    this.element = tree({\n      top: 'center',\n      left: 'center',\n      width: '90%',\n      height: '75%',\n      hidden: true,\n      label: 'Inspector',\n      tags: true,\n      border: {\n        type: 'line'\n      },\n      style: {\n        fg: 'white',\n        border: {\n          fg: '#f0f0f0'\n        },\n      },\n      template: {\n        extend: '{bold}{green-fg} [+]{/}',\n        retract: '{bold}{yellow-fg} [-]{/}',\n        lines: true,\n      }\n    });\n  }\n\n  open(selectedLog) {\n    if (!selectedLog || !selectedLog.data && !selectedLog.stackTrace) {\n      return;\n    }\n    this.opened = true;\n    this.element.show();\n    this.element.focus();\n    this.element.setData(this.prepareData(selectedLog));\n  }\n\n  close() {\n    this.opened = false;\n    this.element.hide();\n  }\n\n  prepareData(log) {\n    const content = {};\n    if (log.data) {\n      content.data = JSON.parse(prune(log.data, {\n        depthDecr: 7,\n        replacer: (value, defaultValue, circular) => {\n          if (typeof value === 'function') {\n            return '\"Function [pruned]\"';\n          }\n          if (Array.isArray(value)) {\n            return `\"Array (${value.length}) [pruned]\"`;\n          }\n          if (typeof value === 'object') {\n            return '\"Object [pruned]\"';\n          }\n          return defaultValue;\n        }\n      }));\n    }\n\n    if (log.stackTrace) {\n      content['stack trace'] = log.stackTrace.map((callsite) => {\n        const relativePath = path.relative(appRoot.toString(), callsite.file);\n        return {\n          type: callsite.type,\n          function: callsite.function,\n          method: callsite.method,\n          file: `${relativePath}:{yellow-fg}${callsite.line}{/yellow-fg}:{yellow-fg}${callsite.column}{/yellow-fg}`,\n        };\n      });\n    }\n    return this.formatData(content);\n  }\n\n  formatData(data, key, depth = 0) {\n    depth++;\n    if (typeof data === 'object') {\n      if (data !== null) {\n        let name;\n        let extended;\n\n        if (depth === 2) {\n          name = `{yellow-fg}{bold}${key.toUpperCase()}{/bold}{/yellow-fg} {magenta-fg}(${data.length}){/magenta-fg}`;\n          extended = key === 'data';\n        } else {\n          const type = (Array.isArray(data) ? `[Array] {magenta-fg}(${data.length}){/magenta-fg}` : '[Object]');\n          name = `{blue-fg}{bold}${key ? key + ' ' : ''}{/bold}${type}{/blue-fg}`;\n          extended = depth < 4;\n        }\n        const newObj = {\n          children: {},\n          name,\n          extended\n        };\n        Object.keys(data).forEach((key) => {\n          const child = this.formatData(data[key], key, depth);\n          if (child) {\n            newObj.children[key] = child;\n          }\n        });\n        return newObj;\n      }\n    }\n    if (typeof data === 'function') {\n      return {\n        name: `{blue-fg}${key}{/blue-fg}: {red-fg}{bold}[Function]{/}`,\n      };\n    }\n    if (typeof data === 'number') {\n      return {\n        name: `{blue-fg}${key}{/blue-fg}: {yellow-fg}${data}{/}`,\n      };\n    }\n    if (data === null) {\n      return {\n        name: `{blue-fg}${key}{/blue-fg}: {cyan-fg}{bold}null{/}`,\n      };\n    }\n    return {\n      name: `{blue-fg}${key}{/blue-fg}: ${data}`,\n    };\n  }\n}\n","import blessed from 'blessed';\nimport transceiver from 'transceiver';\n\nimport LogsList from './logsList';\nimport LogDetails from './logDetails';\nimport Inspector from './inspector';\n\nexport default class Ui {\n  constructor() {\n    this.channel = transceiver.channel('ui');\n    this.screen = blessed.screen({\n      smartCSR: true\n    });\n\n    this.logsList = new LogsList();\n    this.logDetails = new LogDetails();\n    this.inspector = new Inspector();\n\n    this.separator = blessed.line({\n      bottom: 6,\n      orientation: 'horizontal'\n    });\n\n    this.screen.append(this.logsList.element);\n    this.screen.append(this.logDetails.element);\n    this.screen.append(this.separator);\n    this.screen.append(this.inspector.element);\n\n    this.logsList.element.focus();\n\n    this.screen.key(['q', 'C-c'], function(ch, key) {\n      return process.exit(0);\n    });\n\n    this.screen.key(['i'], this.toggleInspector.bind(this));\n\n    this.screen.render();\n\n    this.channel.reply('render', () => this.screen.render());\n  }\n\n  toggleInspector() {\n    if (this.inspector.opened) {\n      this.inspector.close();\n      this.logsList.focus();\n    } else {\n      this.inspector.open(this.logsList.selectedLog);\n    }\n    this.screen.render();\n  }\n}\n","import blessed from 'blessed';\nimport shortid from 'shortid';\nimport transceiver from 'transceiver';\nimport prune from 'json-prune';\nimport dateFormat from 'dateformat';\n\nexport default class LogItem {\n  constructor({name, type, status, parent, data, message, stackTrace, date = Date.now()}) {\n    this.id = shortid.generate();\n    this.name = name;\n    this.type = type;\n    this.status = status;\n    this.data = data;\n    this.message = message;\n    this.stackTrace = stackTrace;\n    this.date = date;\n    this.children = [];\n    this.channel = transceiver.channel('log');\n\n    if (parent) {\n      this.depth = parent.depth + 1;\n      this.parent = parent;\n      this.previousLog = parent.getLastChild() || parent;\n      this.relativeDuration = this.getRelativeDuration();\n      this.parent.addChild(this);\n    } else {\n      this.depth = 0;\n    }\n    this.element = this.channel.request('addLog', this);\n    this.update();\n  }\n\n  update() {\n    if (this.element) {\n      this.element.content = this.render();\n      transceiver.request('ui', 'render');\n    }\n  }\n\n  render() {\n    let message = `${this.renderState()}${this.renderName()}${this.renderMessage()}${this.renderData()}${this.renderDate()}${this.renderDuration()}`;\n    for (let i = 0; i < this.depth; i++) {\n      message = '    ' + message;\n    }\n    return message;\n  }\n\n  renderState() {\n    if (this.type === 'async' && this.status === 'pending') {\n      return `{cyan-fg}[⌛]{/cyan-fg} `;\n    }\n    if (this.type === 'async' && this.status === 'resolved') {\n      return `{green-fg}[✔]{/green-fg} `;\n    }\n    if (this.type === 'async' && this.status === 'rejected') {\n      return `{red-fg}[✘]{/red-fg} `;\n    }\n    if (this.type === 'success') {\n      return `{green-fg}✔{/green-fg} `;\n    }\n    if (this.type === 'error') {\n      return `{red-fg}✘{/red-fg} `;\n    }\n    if (this.type === 'warn') {\n      return `{yellow-fg}❗{/yellow-fg} `;\n    }\n    if (this.type === 'info') {\n      return '⇢ ';\n    }\n    return '';\n  }\n\n  renderName() {\n    if (this.depth === 0) {\n      return this.name ? `{underline}{bold}${this.name}{/bold}{/underline} ` : '';\n    }\n    if (this.type === 'async') {\n      if (this.status === 'resolved') {\n        return `{bold}{green-fg}${this.name}{/green-fg}{/bold} (async) `;\n      }\n      if (this.status === 'rejected') {\n        return `{bold}{red-fg}${this.name}{/red-fg}{/bold} (async) `;\n      }\n      return `{bold}${this.name}{/bold} (async) `;\n    }\n    if (this.type === 'success') {\n      return this.name ? `{bold}{green-fg}${this.name}{/green-fg}{/bold} ` : '';\n    }\n    if (this.type === 'error') {\n      return this.name ? `{bold}{red-fg}${this.name}{/red-fg}{/bold} ` : '';\n    }\n    if (this.type === 'warn') {\n      return this.name ? `{bold}{yellow-fg}${this.name}{/yellow-fg}{/bold} ` : '';\n    }\n    return this.name ? `{bold}${this.name}{/bold} ` : '';\n  }\n\n  renderData() {\n    if (this.depth === 0) {\n      // console.log(this.data);\n    }\n    if (!this.data) {\n      return '';\n    }\n    if (Array.isArray(this.data)) {\n      return this.data.map(this.renderValue.bind(this)).join(' ') + ' ';\n    }\n    return this.renderValue(this.data) + ' ';\n  }\n\n  renderValue(value) {\n    if (Array.isArray(value)) {\n      return `{cyan-fg}${this.prune(value)}{/cyan-fg}`;\n    }\n    if (typeof value === 'object') {\n      return `{blue-fg}${this.prune(value)}{/blue-fg}`;\n    }\n    if (typeof value === 'function') {\n      return `{red-fg}{bold}[Function]{/bold}{red-fg}`;\n    }\n    if (typeof value === 'number') {\n      return `{yellow-fg}${value}{/yellow-fg}`;\n    }\n    if (typeof value === 'string') {\n      if (this.type === 'success') {\n        return `{green-fg}${value}{/green-fg}`;\n      }\n      if (this.type === 'error') {\n        return `{red-fg}${value}{/red-fg}`;\n      }\n      if (this.type === 'warn') {\n        return `{yellow-fg}${value}{/yellow-fg}`;\n      }\n    }\n    return value;\n  }\n\n  renderMessage() {\n    if (this.message) {\n      if (this.type === 'success') {\n        return `{green-fg}${this.message}{/green-fg} `;\n      }\n      if (this.type === 'error') {\n        return `{red-fg}${this.message}{/red-fg} `;\n      }\n      if (this.type === 'warn') {\n        return `{yellow-fg}${this.message}{/yellow-fg} `;\n      }\n      return `${this.message} `;\n    }\n    return '';\n  }\n\n  renderDate() {\n    if (this.depth === 0) {\n      return `{magenta-fg}(${dateFormat(this.date, 'dd/mm/yyyy HH:MM:ss.L')}){/magenta-fg} `;\n    }\n    return '';\n  }\n\n  renderDuration() {\n    if (this.relativeDuration) {\n      return `{grey-fg}+${this.relativeDuration}{/grey-fg} `;\n    }\n    return '';\n  }\n\n  getRelativeDuration() {\n    return this.humanizeDuration(this.date - this.previousLog.date);\n  }\n\n  humanizeDuration(duration) {\n    if (duration < 1000) {\n      return `${duration}ms`;\n    }\n    if (duration < 60000) {\n      let milliseconds = duration % 1000;\n      milliseconds = ('000' + milliseconds).slice(-3);\n      return `${Math.floor(duration / 1000)}.${milliseconds}s`;\n    }\n    return `${Math.floor(duration / 60000)}m ${Math.round((duration % 60000) / 1000)}s`;\n  }\n\n  addChild(log) {\n    this.children.push(log);\n  }\n\n  getLastChild() {\n    return this.children[this.children.length - 1];\n  }\n\n  getChildren(list) {\n    list = list || [];\n    list.push.apply(list, this.children);\n    this.children.forEach(child => {\n      child.getChildren(list);\n    });\n    return list;\n  }\n\n  setStatus(status) {\n    this.status = status;\n    this.update();\n  }\n\n  prune(value) {\n    return prune(value, {\n      depthDecr: 2,\n      arrayMaxLength: 8,\n      prunedString: ' [...]'\n    });\n  }\n}\n","import shortid from 'shortid';\nimport transceiver from 'transceiver';\nimport stackTrace from 'stack-trace';\n\nimport LogItem from './ui/logItem';\n\nclass Agent {\n  constructor({name, type, status, data, message, isAsync = false, ancestors}) {\n    this.name = name;\n    this.children = {};\n    this.isAsync = isAsync;\n    this.asyncState = this.isAsync ? 'pending' : null;\n    this.type = type;\n    this.status = status;\n\n    if (!ancestors) {\n      this.ancestors = [];\n      this.isRoot = true;\n    } else {\n      this.ancestors = ancestors;\n      this.parent = this.ancestors[this.ancestors.length - 1];\n    }\n\n    this.logItem = new LogItem({\n      name: this.name,\n      type: this.type,\n      status: this.status,\n      parent: this.parent ? this.parent.logItem : null,\n      data: data,\n      message: message,\n      stackTrace: this.generateStackTrace(stackTrace.get()),\n    });\n\n    return this;\n  }\n\n  log(...args) {\n    new Agent({\n      type: 'info',\n      data: args,\n      ancestors: this.ancestors.concat(this)\n    });\n    return this;\n  }\n\n  warn(...args) {\n    new Agent({\n      type: 'warn',\n      data: args,\n      ancestors: this.ancestors.concat(this)\n    });\n    return this;\n  }\n\n  success(...args) {\n    new Agent({\n      type: 'success',\n      data: args,\n      ancestors: this.ancestors.concat(this),\n    });\n    return this;\n  }\n\n  error(...args) {\n    new Agent({\n      type: 'error',\n      data: args,\n      ancestors: this.ancestors.concat(this),\n    });\n    return this;\n  }\n\n  child(name, ...args) {\n    if (!this.children[name]) {\n      this.children[name] = new Agent({\n        name,\n        type: 'node',\n        ancestors: this.ancestors.concat(this),\n      });\n    }\n    if (args.length) {\n      this.children[name].log(...args);\n    }\n    return this.children[name];\n  }\n\n  async(name, ...args) {\n    if (!this.children[name]) {\n      this.children[name] = new Agent({\n        name,\n        type: 'async',\n        status: 'pending',\n        isAsync: true,\n        ancestors: this.ancestors.concat(this),\n      });\n    }\n    if (!this.children[name].isAsync) {\n      this.internalWarn(`Child agent {bold}${name}{/bold} is defined as a non async agent`);\n    }\n    if (args.length) {\n      this.children[name].log(...args);\n    }\n    return this.children[name];\n  }\n\n  resolve(...args) {\n    if (this.isAsync) {\n      if (this.logItem.status === 'pending') {\n        this.logItem.setStatus('resolved');\n        const resolveLog = new Agent({\n          name: this.name,\n          type: 'success',\n          message: 'resolved',\n          ancestors: this.ancestors.concat(this),\n        });\n        if (args.length) {\n          resolveLog.success(...args);\n        }\n      } else {\n        this.internalWarn(`Trying to resolve an already {bold}${this.logItem.status}{/bold} async agent`);\n      }\n    } else {\n      this.internalWarn('Trying to resolve a non async agent');\n    }\n    return this;\n  }\n\n  reject(...args) {\n    if (this.isAsync) {\n      if (this.logItem.status === 'pending') {\n        this.logItem.setStatus('rejected');\n        const rejectLog = new Agent({\n          name: this.name,\n          type: 'error',\n          message: 'rejected',\n          ancestors: this.ancestors.concat(this),\n        });\n        if (args.length) {\n          rejectLog.error(...args);\n        }\n      } else {\n        this.internalWarn(`Trying to reject an already {bold}${this.logItem.status}{/bold} async agent`);\n      }\n    } else {\n      this.internalWarn('Trying to reject a non async agent');\n    }\n    return this;\n  }\n\n  internalWarn(message) {\n    new Agent({\n      name: this.name,\n      type: 'warn',\n      message,\n      ancestors: this.ancestors.concat(this),\n    });\n  }\n\n  getAncestorsNames() {\n    return this.ancestors.map(ancestor => ancestor.name);\n  }\n\n  generateStackTrace(trace) {\n    const stackTrace = [];\n    for (let i = 0; i < 5; i++) {\n      stackTrace.push({\n        type: trace[i].getTypeName(),\n        function: trace[i].getFunctionName(),\n        method: trace[i].getMethodName(),\n        file: trace[i].getFileName(),\n        line: trace[i].getLineNumber(),\n        column: trace[i].getColumnNumber(),\n      });\n    }\n    return stackTrace;\n  }\n}\n\nexport default function(name, ...args) {\n  return new Agent({\n    name,\n    type: 'root',\n    data: args.length ? args : undefined,\n  });\n};\n","import transceiver from 'transceiver';\n\nimport Ui from './ui';\nimport agent from './agent';\n\ntransceiver.setPromise(null);\n\nconst ui = new Ui();\n\nexport default {ui, agent};\n"],"sourceRoot":"/source/"}