{"version":3,"sources":["investigator.min.js","/source/investigator.js","/source/src/ui/tree.js","/source/src/ui/logsList.js","/source/src/ui/logDetails.js","/source/src/ui/inspector.js","/source/src/ui/index.js","/source/src/ui/logItem.js","/source/src/agent.js","/source/src/investigator.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","investigator","transceiver","blessed","dateFormat","prune","path","appRoot","shortid","stack_trace","this","_prune","Tree","options","Node","bold","self","data","nodeLines","lineNbr","Box","call","extended","keys","template","extend","retract","lines","rows","list","height","top","width","left","selectedFg","selectedBg","tags","getItemIndex","selected","setData","screen","render","emit","append","LogsList","_this","selectedLog","logs","logsCount","channel","autoScroll","element","bottom","mouse","scrollbar","bg","style","fg","ch","name","scrollToBottom","request","on","getLogFromElement","reply","addLog","getSelectedLog","value","log","undefined","id","parent","index","getChildren","insertItem","getItem","add","logId","move","focus","logDetails","box","padding","right","border","hover","updateLogDetails","bind","setContent","renderType","renderId","renderDate","renderDuration","renderData","type","status","date","relativeDuration","previousLog","walk","node","treeDepth","push","depth","children","childrenContent","child","position","tree","isLastChild","suffix","parentTree","concat","focused","formatted","setItems","__proto__","ui_tree","Inspector","hidden","label","stackTrace","opened","show","prepareData","hide","content","JSON","parse","depthDecr","replacer","defaultValue","circular","Array","isArray","map","callsite","relativePath","relative","toString","file","function","method","line","column","formatData","_this2","arguments","_ret","toUpperCase","newObj","forEach","v","Ui","_this3","smartCSR","logsList","inspector","separator","orientation","process","exit","toggleInspector","close","open","LogItem","_ref","message","_ref$date","Date","now","generate","getLastChild","getRelativeDuration","addChild","update","renderState","renderName","renderMessage","renderValue","join","humanizeDuration","duration","milliseconds","slice","Math","floor","round","apply","arrayMaxLength","prunedString","Agent","_ref2","_ref2$isAsync","isAsync","ancestors","asyncState","isRoot","logItem","generateStackTrace","get","_len","args","_key","_len2","_key2","_len3","_key3","_len4","_key4","_len5","_key5","_children$name","internalWarn","_len6","_key6","_children$name2","setStatus","resolveLog","_len7","_key7","success","rejectLog","_len8","_key8","error","ancestor","trace","getTypeName","getFunctionName","getMethodName","getFileName","getLineNumber","getColumnNumber","agent","_len9","_key9","setPromise","ui"],"mappings":"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","file":"investigator.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('transceiver'), require('blessed'), require('dateformat'), require('json-prune'), require('path'), require('app-root-path'), require('shortid'), require('stack-trace')) :\n  typeof define === 'function' && define.amd ? define(['transceiver', 'blessed', 'dateformat', 'json-prune', 'path', 'app-root-path', 'shortid', 'stack-trace'], factory) :\n  global.investigator = factory(global.transceiver, global.blessed, global.dateFormat, global.prune, global.path, global.appRoot, global.shortid, global.stack_trace)\n}(this, function (transceiver, blessed, dateFormat, prune, path, appRoot, shortid, stack_trace) { 'use strict';\n\n  class LogsList {\n    constructor() {\n      this.selectedLog = null;\n      this.logs = {};\n      this.logsCount = 0;\n      this.channel = transceiver.channel('log');\n      this.autoScroll = true;\n      this.element = blessed.list({\n        top: '0',\n        left: '0',\n        bottom: 7,\n        tags: true,\n        keys: true,\n        mouse: true,\n        scrollbar: {\n          bg: 'magenta',\n        },\n        style: {\n          selected: {\n            fg: 'black',\n            bg: 'white',\n          }\n        }\n      });\n\n      this.element.key(['up', 'down', 's', 'b'], (ch, key) => {\n        if (key.name === 's') {\n          this.autoScroll = !this.autoScroll;\n        } else if (key.name === 'b') {\n          this.scrollToBottom();\n          transceiver.request('ui', 'render');\n        } else {\n          this.autoScroll = false;\n        }\n      });\n\n      this.element.on('select item', (element, i) => {\n        this.selectedLog = this.getLogFromElement(element);\n        if (this.selectedLog) {\n          this.channel.emit('select log', this.selectedLog);\n        }\n      });\n\n      this.channel.reply({\n        addLog: this.addLog,\n        getSelectedLog: this.getSelectedLog,\n      }, this);\n    }\n\n    addLog(log) {\n      let element;\n\n      this.logs[log.id] = log;\n      this.logsCount++;\n\n      if (log.parent) {\n        const index = this.element.getItemIndex(log.parent.element) + log.parent.getChildren().length;\n        this.element.insertItem(index, log.render());\n        element = this.element.getItem(index);\n      } else {\n        element = this.element.add(log.render());\n      }\n      element.logId = log.id;\n      if (this.autoScroll) {\n        this.scrollToBottom();\n      }\n      if (this.logsCount === 1) {\n        this.channel.emit('select log', log);\n      }\n      return element;\n    }\n\n    getSelectedLog() {\n      return this.selectedLog;\n    }\n\n    scrollToBottom() {\n      this.element.move(this.logsCount);\n    }\n\n    getLogFromElement(element) {\n      return this.logs[element.logId];\n    }\n\n    focus() {\n      this.element.focus();\n    }\n  }\n\n  class logDetails {\n    constructor() {\n      this.channel = transceiver.channel('log');\n      this.element = blessed.box({\n        height: 6,\n        left: '0',\n        bottom: 0,\n        tags: true,\n        keys: true,\n        padding: {\n          left: 1,\n          right: 1,\n        },\n        style: {\n          selected: {\n            fg: 'black',\n            bg: 'white',\n            border: {\n              fg: 'white'\n            },\n            hover: {\n              bg: 'green'\n            }\n          }\n        }\n      });\n\n      this.channel.on('select log', this.updateLogDetails.bind(this));\n    }\n\n    updateLogDetails(log) {\n      this.element.setContent(this.renderType(log) + this.renderId(log) + this.renderDate(log) + this.renderDuration(log) + this.renderData(log));\n    }\n\n    renderType(log) {\n      if (log.type === 'root') {\n        return '{magenta-fg}{bold}ROOT NODE{/bold}{/magenta-fg}\\n';\n      }\n      if (log.type === 'success') {\n        return '{green-fg}✔ {bold}SUCCESS{/bold}{/green-fg}\\n';\n      }\n      if (log.type === 'error') {\n        return '{red-fg}✘ {bold}ERROR{/bold}{/red-fg}\\n';\n      }\n      if (log.type === 'warn') {\n        return '{yellow-fg}! {bold}WARN{/bold}{/red-fg}\\n';\n      }\n      if (log.type === 'node') {\n        return '{grey-fg}{bold}NODE{/bold}{/grey-fg}\\n';\n      }\n      if (log.type === 'async') {\n        if (log.status === 'resolved') {\n          return '{bold}{green-fg}ASYNC NODE{/bold} (RESOLVED ✔){/green-fg}\\n';\n        }\n        if (log.status === 'rejected') {\n          return '{bold}{red-fg}ASYNC NODE{/bold} (REJECTED ✘){/red-fg}\\n';\n        }\n        if (log.status === 'pending') {\n          return '{cyan-fg}{bold}ASYNC NODE{/bold} (PENDING ⌛){/cyan-fg}\\n';\n        }\n      }\n      if (log.type === 'info') {\n        return '{white-fg}{bold}INFO{/bold}{/white-fg}\\n';\n      }\n      return '';\n    }\n\n    renderId(log) {\n      return `{bold}ID:{/bold} {underline}${log.id}{/underline}\\n`;\n    }\n\n    renderDate(log) {\n      return `{bold}TIME:{/bold} {magenta-fg}${dateFormat(log.date, 'dddd, mmmm dS yyyy, HH:MM:ss.L')}{/magenta-fg}\\n`;\n    }\n\n    renderDuration(log) {\n      if (log.relativeDuration && log.previousLog) {\n        return `{bold}DURATION:{/bold} {yellow-fg}${log.relativeDuration}{/yellow-fg} (from {underline}${log.previousLog.id}{/underline})\\n`;\n      }\n      return '';\n    }\n\n    renderData(log) {\n      if (log.data) {\n        return `{bold}DATA:{/bold} ${log.renderData()}\\n`;\n      }\n      return '';\n    }\n  }\n\n  // https://github.com/yaronn/blessed-contrib/blob/master/lib/widget/tree.js\n  const Node = blessed.Node;\n  const Box = blessed.Box;\n\n  function Tree(options) {\n\n    if (!(this instanceof Node)) {\n      return new Tree(options);\n    }\n\n    options = options || {};\n    options.bold = true;\n    var self = this;\n    this.options = options;\n    this.data = {};\n    this.nodeLines = [];\n    this.lineNbr = 0;\n    Box.call(this, options);\n\n    options.extended = options.extended || false;\n    options.keys = options.keys || ['space','enter'];\n\n    options.template = options.template || {};\n    options.template.extend = options.template.extend || ' [+]';\n    options.template.retract = options.template.retract || ' [-]';\n    options.template.lines = options.template.lines || false;\n\n    this.rows = blessed.list({\n      height: 0,\n      top: 1,\n      width: 0,\n      left: 1,\n      selectedFg: 'black',\n      selectedBg: 'white',\n      keys: true,\n      tags: true,\n    });\n\n    this.rows.key(options.keys,function() {\n      self.nodeLines[this.getItemIndex(this.selected)].extended = !self.nodeLines[this.getItemIndex(this.selected)].extended;\n      self.setData(self.data);\n      self.screen.render();\n\n      self.emit('select',self.nodeLines[this.getItemIndex(this.selected)]);\n    });\n\n    this.append(this.rows);\n  }\n\n  Tree.prototype.walk = function(node, treeDepth) {\n    var lines = [];\n\n    if (!node.parent) {\n      node.parent = null;\n    }\n\n    if (treeDepth == '' && node.name) {\n      this.lineNbr = 0;\n      this.nodeLines[this.lineNbr++] = node;\n      lines.push(node.name);\n      treeDepth = ' ';\n    }\n\n    node.depth = treeDepth.length - 1;\n\n    if (node.children && node.extended) {\n\n      var i = 0;\n\n      if (typeof node.children == 'function') {\n        node.childrenContent = node.children(node);\n      }\n\n      if (!node.childrenContent) {\n        node.childrenContent = node.children;\n      }\n\n      for (var child in node.childrenContent) {\n\n        if (!node.childrenContent[child].name) {\n          node.childrenContent[child].name = child;\n        }\n\n        var childIndex = child;\n        child = node.childrenContent[child];\n        child.parent = node;\n        child.position = i++;\n\n        if (typeof child.extended == 'undefined') {\n          child.extended = this.options.extended;\n        }\n\n        if (typeof child.children == 'function') {\n          child.childrenContent = child.children(child);\n        } else {\n          child.childrenContent = child.children;\n        }\n\n        var isLastChild = child.position == Object.keys(child.parent.childrenContent).length - 1;\n        var tree;\n        var suffix = '';\n        if (isLastChild) {\n          tree = '└';\n        } else {\n          tree = '├';\n        }\n        if (!child.childrenContent || Object.keys(child.childrenContent).length == 0) {\n          tree += '─';\n        } else if (child.extended) {\n          tree += '┬';\n          suffix = this.options.template.retract;\n        } else {\n          tree += '─';\n          suffix = this.options.template.extend;\n        }\n\n        if (!this.options.template.lines) {\n          tree = '|-';\n        }\n\n        lines.push(treeDepth + tree + child.name + suffix);\n\n        this.nodeLines[this.lineNbr++] = child;\n\n        var parentTree;\n        if (isLastChild || !this.options.template.lines) {\n          parentTree = treeDepth + ' ';\n        } else {\n          parentTree = treeDepth + '│';\n        }\n        lines = lines.concat(this.walk(child, parentTree));\n      }\n    }\n    return lines;\n  };\n\n  Tree.prototype.focus = function() {\n    this.rows.focus();\n  };\n\n  Tree.prototype.render = function() {\n    if (this.screen.focused == this.rows) {\n      this.rows.focus();\n    }\n\n    this.rows.width = this.width - 3;\n    this.rows.height = this.height - 3;\n    Box.prototype.render.call(this);\n  };\n\n  Tree.prototype.setData = function(data) {\n\n    var formatted = [];\n    formatted = this.walk(data,'');\n\n    this.data = data;\n    this.rows.setItems(formatted);\n  };\n\n  Tree.prototype.__proto__ = Box.prototype;\n\n  Tree.prototype.type = 'tree';\n\n  var ui_tree = Tree;\n\n  class Inspector {\n    constructor() {\n      this.channel = transceiver.channel('log');\n\n      this.element = ui_tree({\n        top: 'center',\n        left: 'center',\n        width: '90%',\n        height: '75%',\n        hidden: true,\n        label: 'Inspector',\n        tags: true,\n        border: {\n          type: 'line'\n        },\n        style: {\n          fg: 'white',\n          border: {\n            fg: '#f0f0f0'\n          },\n        },\n        template: {\n          extend: '{bold}{green-fg} [+]{/}',\n          retract: '{bold}{yellow-fg} [-]{/}',\n          lines: true,\n        }\n      });\n    }\n\n    open(selectedLog) {\n      if (!selectedLog || !selectedLog.data && !selectedLog.stackTrace) {\n        return;\n      }\n      this.opened = true;\n      this.element.show();\n      this.element.focus();\n      this.element.setData(this.prepareData(selectedLog));\n    }\n\n    close() {\n      this.opened = false;\n      this.element.hide();\n    }\n\n    prepareData(log) {\n      const content = {};\n      if (log.data) {\n        content.data = JSON.parse(prune(log.data, {\n          depthDecr: 7,\n          replacer: (value, defaultValue, circular) => {\n            if (typeof value === 'function') {\n              return '\"Function [pruned]\"';\n            }\n            if (Array.isArray(value)) {\n              return `\"Array (${value.length}) [pruned]\"`;\n            }\n            if (typeof value === 'object') {\n              return '\"Object [pruned]\"';\n            }\n            return defaultValue;\n          }\n        }));\n      }\n\n      if (log.stackTrace) {\n        content['stack trace'] = log.stackTrace.map((callsite) => {\n          const relativePath = path.relative(appRoot.toString(), callsite.file);\n          return {\n            type: callsite.type,\n            function: callsite.function,\n            method: callsite.method,\n            file: `${relativePath}:{yellow-fg}${callsite.line}{/yellow-fg}:{yellow-fg}${callsite.column}{/yellow-fg}`,\n          };\n        });\n      }\n      return this.formatData(content);\n    }\n\n    formatData(data, key, depth = 0) {\n      depth++;\n      if (typeof data === 'object') {\n        if (data !== null) {\n          let name;\n          let extended;\n\n          if (depth === 2) {\n            name = `{yellow-fg}{bold}${key.toUpperCase()}{/bold}{/yellow-fg} {magenta-fg}(${data.length}){/magenta-fg}`;\n            extended = key === 'data';\n          } else {\n            const type = (Array.isArray(data) ? `[Array] {magenta-fg}(${data.length}){/magenta-fg}` : '[Object]');\n            name = `{blue-fg}{bold}${key ? key + ' ' : ''}{/bold}${type}{/blue-fg}`;\n            extended = depth < 4;\n          }\n          const newObj = {\n            children: {},\n            name,\n            extended\n          };\n          Object.keys(data).forEach((key) => {\n            const child = this.formatData(data[key], key, depth);\n            if (child) {\n              newObj.children[key] = child;\n            }\n          });\n          return newObj;\n        }\n      }\n      if (typeof data === 'function') {\n        return {\n          name: `{blue-fg}${key}{/blue-fg}: {red-fg}{bold}[Function]{/}`,\n        };\n      }\n      if (typeof data === 'number') {\n        return {\n          name: `{blue-fg}${key}{/blue-fg}: {yellow-fg}${data}{/}`,\n        };\n      }\n      if (data === null) {\n        return {\n          name: `{blue-fg}${key}{/blue-fg}: {cyan-fg}{bold}null{/}`,\n        };\n      }\n      return {\n        name: `{blue-fg}${key}{/blue-fg}: ${data}`,\n      };\n    }\n  }\n\n  class Ui {\n    constructor() {\n      this.channel = transceiver.channel('ui');\n      this.screen = blessed.screen({\n        smartCSR: true\n      });\n\n      this.logsList = new LogsList();\n      this.logDetails = new logDetails();\n      this.inspector = new Inspector();\n\n      this.separator = blessed.line({\n        bottom: 6,\n        orientation: 'horizontal'\n      });\n\n      this.screen.append(this.logsList.element);\n      this.screen.append(this.logDetails.element);\n      this.screen.append(this.separator);\n      this.screen.append(this.inspector.element);\n\n      this.logsList.element.focus();\n\n      this.screen.key(['q', 'C-c'], function(ch, key) {\n        return process.exit(0);\n      });\n\n      this.screen.key(['i'], this.toggleInspector.bind(this));\n\n      this.screen.render();\n\n      this.channel.reply('render', () => this.screen.render());\n    }\n\n    toggleInspector() {\n      if (this.inspector.opened) {\n        this.inspector.close();\n        this.logsList.focus();\n      } else {\n        this.inspector.open(this.logsList.selectedLog);\n      }\n      this.screen.render();\n    }\n  }\n\n  class LogItem {\n    constructor({name, type, status, parent, data, message, stackTrace, date = Date.now()}) {\n      this.id = shortid.generate();\n      this.name = name;\n      this.type = type;\n      this.status = status;\n      this.data = data;\n      this.message = message;\n      this.stackTrace = stackTrace;\n      this.date = date;\n      this.children = [];\n      this.channel = transceiver.channel('log');\n\n      if (parent) {\n        this.depth = parent.depth + 1;\n        this.parent = parent;\n        this.previousLog = parent.getLastChild() || parent;\n        this.relativeDuration = this.getRelativeDuration();\n        this.parent.addChild(this);\n      } else {\n        this.depth = 0;\n      }\n      this.element = this.channel.request('addLog', this);\n      this.update();\n    }\n\n    update() {\n      if (this.element) {\n        this.element.content = this.render();\n        transceiver.request('ui', 'render');\n      }\n    }\n\n    render() {\n      let message = `${this.renderState()}${this.renderName()}${this.renderMessage()}${this.renderData()}${this.renderDate()}${this.renderDuration()}`;\n      for (let i = 0; i < this.depth; i++) {\n        message = '    ' + message;\n      }\n      return message;\n    }\n\n    renderState() {\n      if (this.type === 'async' && this.status === 'pending') {\n        return `{cyan-fg}[⌛]{/cyan-fg} `;\n      }\n      if (this.type === 'async' && this.status === 'resolved') {\n        return `{green-fg}[✔]{/green-fg} `;\n      }\n      if (this.type === 'async' && this.status === 'rejected') {\n        return `{red-fg}[✘]{/red-fg} `;\n      }\n      if (this.type === 'success') {\n        return `{green-fg}✔{/green-fg} `;\n      }\n      if (this.type === 'error') {\n        return `{red-fg}✘{/red-fg} `;\n      }\n      if (this.type === 'warn') {\n        return `{yellow-fg}❗{/yellow-fg} `;\n      }\n      if (this.type === 'info') {\n        return '⇢ ';\n      }\n      return '';\n    }\n\n    renderName() {\n      if (this.depth === 0) {\n        return this.name ? `{underline}{bold}${this.name}{/bold}{/underline} ` : '';\n      }\n      if (this.type === 'async') {\n        if (this.status === 'resolved') {\n          return `{bold}{green-fg}${this.name}{/green-fg}{/bold} (async) `;\n        }\n        if (this.status === 'rejected') {\n          return `{bold}{red-fg}${this.name}{/red-fg}{/bold} (async) `;\n        }\n        return `{bold}${this.name}{/bold} (async) `;\n      }\n      if (this.type === 'success') {\n        return this.name ? `{bold}{green-fg}${this.name}{/green-fg}{/bold} ` : '';\n      }\n      if (this.type === 'error') {\n        return this.name ? `{bold}{red-fg}${this.name}{/red-fg}{/bold} ` : '';\n      }\n      if (this.type === 'warn') {\n        return this.name ? `{bold}{yellow-fg}${this.name}{/yellow-fg}{/bold} ` : '';\n      }\n      return this.name ? `{bold}${this.name}{/bold} ` : '';\n    }\n\n    renderData() {\n      if (this.depth === 0) {\n        // console.log(this.data);\n      }\n      if (!this.data) {\n        return '';\n      }\n      if (Array.isArray(this.data)) {\n        return this.data.map(this.renderValue.bind(this)).join(' ') + ' ';\n      }\n      return this.renderValue(this.data) + ' ';\n    }\n\n    renderValue(value) {\n      if (Array.isArray(value)) {\n        return `{cyan-fg}${this.prune(value)}{/cyan-fg}`;\n      }\n      if (typeof value === 'object') {\n        return `{blue-fg}${this.prune(value)}{/blue-fg}`;\n      }\n      if (typeof value === 'function') {\n        return `{red-fg}{bold}[Function]{/bold}{red-fg}`;\n      }\n      if (typeof value === 'number') {\n        return `{yellow-fg}${value}{/yellow-fg}`;\n      }\n      if (typeof value === 'string') {\n        if (this.type === 'success') {\n          return `{green-fg}${value}{/green-fg}`;\n        }\n        if (this.type === 'error') {\n          return `{red-fg}${value}{/red-fg}`;\n        }\n        if (this.type === 'warn') {\n          return `{yellow-fg}${value}{/yellow-fg}`;\n        }\n      }\n      return value;\n    }\n\n    renderMessage() {\n      if (this.message) {\n        if (this.type === 'success') {\n          return `{green-fg}${this.message}{/green-fg} `;\n        }\n        if (this.type === 'error') {\n          return `{red-fg}${this.message}{/red-fg} `;\n        }\n        if (this.type === 'warn') {\n          return `{yellow-fg}${this.message}{/yellow-fg} `;\n        }\n        return `${this.message} `;\n      }\n      return '';\n    }\n\n    renderDate() {\n      if (this.depth === 0) {\n        return `{magenta-fg}(${dateFormat(this.date, 'dd/mm/yyyy HH:MM:ss.L')}){/magenta-fg} `;\n      }\n      return '';\n    }\n\n    renderDuration() {\n      if (this.relativeDuration) {\n        return `{grey-fg}+${this.relativeDuration}{/grey-fg} `;\n      }\n      return '';\n    }\n\n    getRelativeDuration() {\n      return this.humanizeDuration(this.date - this.previousLog.date);\n    }\n\n    humanizeDuration(duration) {\n      if (duration < 1000) {\n        return `${duration}ms`;\n      }\n      if (duration < 60000) {\n        let milliseconds = duration % 1000;\n        milliseconds = ('000' + milliseconds).slice(-3);\n        return `${Math.floor(duration / 1000)}.${milliseconds}s`;\n      }\n      return `${Math.floor(duration / 60000)}m ${Math.round((duration % 60000) / 1000)}s`;\n    }\n\n    addChild(log) {\n      this.children.push(log);\n    }\n\n    getLastChild() {\n      return this.children[this.children.length - 1];\n    }\n\n    getChildren(list) {\n      list = list || [];\n      list.push.apply(list, this.children);\n      this.children.forEach(child => {\n        child.getChildren(list);\n      });\n      return list;\n    }\n\n    setStatus(status) {\n      this.status = status;\n      this.update();\n    }\n\n    prune(value) {\n      return prune(value, {\n        depthDecr: 2,\n        arrayMaxLength: 8,\n        prunedString: ' [...]'\n      });\n    }\n  }\n\n  class Agent {\n    constructor({name, type, status, data, message, isAsync = false, ancestors}) {\n      this.name = name;\n      this.children = {};\n      this.isAsync = isAsync;\n      this.asyncState = this.isAsync ? 'pending' : null;\n      this.type = type;\n      this.status = status;\n\n      if (!ancestors) {\n        this.ancestors = [];\n        this.isRoot = true;\n      } else {\n        this.ancestors = ancestors;\n        this.parent = this.ancestors[this.ancestors.length - 1];\n      }\n\n      this.logItem = new LogItem({\n        name: this.name,\n        type: this.type,\n        status: this.status,\n        parent: this.parent ? this.parent.logItem : null,\n        data: data,\n        message: message,\n        stackTrace: this.generateStackTrace(stack_trace.get()),\n      });\n\n      return this;\n    }\n\n    log(...args) {\n      new Agent({\n        type: 'info',\n        data: args,\n        ancestors: this.ancestors.concat(this)\n      });\n      return this;\n    }\n\n    warn(...args) {\n      new Agent({\n        type: 'warn',\n        data: args,\n        ancestors: this.ancestors.concat(this)\n      });\n      return this;\n    }\n\n    success(...args) {\n      new Agent({\n        type: 'success',\n        data: args,\n        ancestors: this.ancestors.concat(this),\n      });\n      return this;\n    }\n\n    error(...args) {\n      new Agent({\n        type: 'error',\n        data: args,\n        ancestors: this.ancestors.concat(this),\n      });\n      return this;\n    }\n\n    child(name, ...args) {\n      if (!this.children[name]) {\n        this.children[name] = new Agent({\n          name,\n          type: 'node',\n          ancestors: this.ancestors.concat(this),\n        });\n      }\n      if (args.length) {\n        this.children[name].log(...args);\n      }\n      return this.children[name];\n    }\n\n    async(name, ...args) {\n      if (!this.children[name]) {\n        this.children[name] = new Agent({\n          name,\n          type: 'async',\n          status: 'pending',\n          isAsync: true,\n          ancestors: this.ancestors.concat(this),\n        });\n      }\n      if (!this.children[name].isAsync) {\n        this.internalWarn(`Child agent {bold}${name}{/bold} is defined as a non async agent`);\n      }\n      if (args.length) {\n        this.children[name].log(...args);\n      }\n      return this.children[name];\n    }\n\n    resolve(...args) {\n      if (this.isAsync) {\n        if (this.logItem.status === 'pending') {\n          this.logItem.setStatus('resolved');\n          const resolveLog = new Agent({\n            name: this.name,\n            type: 'success',\n            message: 'resolved',\n            ancestors: this.ancestors.concat(this),\n          });\n          if (args.length) {\n            resolveLog.success(...args);\n          }\n        } else {\n          this.internalWarn(`Trying to resolve an already {bold}${this.logItem.status}{/bold} async agent`);\n        }\n      } else {\n        this.internalWarn('Trying to resolve a non async agent');\n      }\n      return this;\n    }\n\n    reject(...args) {\n      if (this.isAsync) {\n        if (this.logItem.status === 'pending') {\n          this.logItem.setStatus('rejected');\n          const rejectLog = new Agent({\n            name: this.name,\n            type: 'error',\n            message: 'rejected',\n            ancestors: this.ancestors.concat(this),\n          });\n          if (args.length) {\n            rejectLog.error(...args);\n          }\n        } else {\n          this.internalWarn(`Trying to reject an already {bold}${this.logItem.status}{/bold} async agent`);\n        }\n      } else {\n        this.internalWarn('Trying to reject a non async agent');\n      }\n      return this;\n    }\n\n    internalWarn(message) {\n      new Agent({\n        name: this.name,\n        type: 'warn',\n        message,\n        ancestors: this.ancestors.concat(this),\n      });\n    }\n\n    getAncestorsNames() {\n      return this.ancestors.map(ancestor => ancestor.name);\n    }\n\n    generateStackTrace(trace) {\n      const stackTrace = [];\n      for (let i = 0; i < 5; i++) {\n        stackTrace.push({\n          type: trace[i].getTypeName(),\n          function: trace[i].getFunctionName(),\n          method: trace[i].getMethodName(),\n          file: trace[i].getFileName(),\n          line: trace[i].getLineNumber(),\n          column: trace[i].getColumnNumber(),\n        });\n      }\n      return stackTrace;\n    }\n  }\n\n  var agent = function(name, ...args) {\n    return new Agent({\n      name,\n      type: 'root',\n      data: args.length ? args : undefined,\n    });\n  };\n\n  transceiver.setPromise(null);\n\n  const ui = new Ui();\n\n  var investigator = {ui, agent};\n\n  return investigator;\n\n}));\n","// https://github.com/yaronn/blessed-contrib/blob/master/lib/widget/tree.js\nimport blessed from 'blessed';\n\nconst Node = blessed.Node;\nconst Box = blessed.Box;\n\nfunction Tree(options) {\n\n  if (!(this instanceof Node)) {\n    return new Tree(options);\n  }\n\n  options = options || {};\n  options.bold = true;\n  var self = this;\n  this.options = options;\n  this.data = {};\n  this.nodeLines = [];\n  this.lineNbr = 0;\n  Box.call(this, options);\n\n  options.extended = options.extended || false;\n  options.keys = options.keys || ['space','enter'];\n\n  options.template = options.template || {};\n  options.template.extend = options.template.extend || ' [+]';\n  options.template.retract = options.template.retract || ' [-]';\n  options.template.lines = options.template.lines || false;\n\n  this.rows = blessed.list({\n    height: 0,\n    top: 1,\n    width: 0,\n    left: 1,\n    selectedFg: 'black',\n    selectedBg: 'white',\n    keys: true,\n    tags: true,\n  });\n\n  this.rows.key(options.keys,function() {\n    self.nodeLines[this.getItemIndex(this.selected)].extended = !self.nodeLines[this.getItemIndex(this.selected)].extended;\n    self.setData(self.data);\n    self.screen.render();\n\n    self.emit('select',self.nodeLines[this.getItemIndex(this.selected)]);\n  });\n\n  this.append(this.rows);\n}\n\nTree.prototype.walk = function(node, treeDepth) {\n  var lines = [];\n\n  if (!node.parent) {\n    node.parent = null;\n  }\n\n  if (treeDepth == '' && node.name) {\n    this.lineNbr = 0;\n    this.nodeLines[this.lineNbr++] = node;\n    lines.push(node.name);\n    treeDepth = ' ';\n  }\n\n  node.depth = treeDepth.length - 1;\n\n  if (node.children && node.extended) {\n\n    var i = 0;\n\n    if (typeof node.children == 'function') {\n      node.childrenContent = node.children(node);\n    }\n\n    if (!node.childrenContent) {\n      node.childrenContent = node.children;\n    }\n\n    for (var child in node.childrenContent) {\n\n      if (!node.childrenContent[child].name) {\n        node.childrenContent[child].name = child;\n      }\n\n      var childIndex = child;\n      child = node.childrenContent[child];\n      child.parent = node;\n      child.position = i++;\n\n      if (typeof child.extended == 'undefined') {\n        child.extended = this.options.extended;\n      }\n\n      if (typeof child.children == 'function') {\n        child.childrenContent = child.children(child);\n      } else {\n        child.childrenContent = child.children;\n      }\n\n      var isLastChild = child.position == Object.keys(child.parent.childrenContent).length - 1;\n      var tree;\n      var suffix = '';\n      if (isLastChild) {\n        tree = '└';\n      } else {\n        tree = '├';\n      }\n      if (!child.childrenContent || Object.keys(child.childrenContent).length == 0) {\n        tree += '─';\n      } else if (child.extended) {\n        tree += '┬';\n        suffix = this.options.template.retract;\n      } else {\n        tree += '─';\n        suffix = this.options.template.extend;\n      }\n\n      if (!this.options.template.lines) {\n        tree = '|-';\n      }\n\n      lines.push(treeDepth + tree + child.name + suffix);\n\n      this.nodeLines[this.lineNbr++] = child;\n\n      var parentTree;\n      if (isLastChild || !this.options.template.lines) {\n        parentTree = treeDepth + ' ';\n      } else {\n        parentTree = treeDepth + '│';\n      }\n      lines = lines.concat(this.walk(child, parentTree));\n    }\n  }\n  return lines;\n};\n\nTree.prototype.focus = function() {\n  this.rows.focus();\n};\n\nTree.prototype.render = function() {\n  if (this.screen.focused == this.rows) {\n    this.rows.focus();\n  }\n\n  this.rows.width = this.width - 3;\n  this.rows.height = this.height - 3;\n  Box.prototype.render.call(this);\n};\n\nTree.prototype.setData = function(data) {\n\n  var formatted = [];\n  formatted = this.walk(data,'');\n\n  this.data = data;\n  this.rows.setItems(formatted);\n};\n\nTree.prototype.__proto__ = Box.prototype;\n\nTree.prototype.type = 'tree';\n\nexport default Tree;\n","import blessed from 'blessed';\nimport transceiver from 'transceiver';\n\nexport default class LogsList {\n  constructor() {\n    this.selectedLog = null;\n    this.logs = {};\n    this.logsCount = 0;\n    this.channel = transceiver.channel('log');\n    this.autoScroll = true;\n    this.element = blessed.list({\n      top: '0',\n      left: '0',\n      bottom: 7,\n      tags: true,\n      keys: true,\n      mouse: true,\n      scrollbar: {\n        bg: 'magenta',\n      },\n      style: {\n        selected: {\n          fg: 'black',\n          bg: 'white',\n        }\n      }\n    });\n\n    this.element.key(['up', 'down', 's', 'b'], (ch, key) => {\n      if (key.name === 's') {\n        this.autoScroll = !this.autoScroll;\n      } else if (key.name === 'b') {\n        this.scrollToBottom();\n        transceiver.request('ui', 'render');\n      } else {\n        this.autoScroll = false;\n      }\n    });\n\n    this.element.on('select item', (element, i) => {\n      this.selectedLog = this.getLogFromElement(element);\n      if (this.selectedLog) {\n        this.channel.emit('select log', this.selectedLog);\n      }\n    });\n\n    this.channel.reply({\n      addLog: this.addLog,\n      getSelectedLog: this.getSelectedLog,\n    }, this);\n  }\n\n  addLog(log) {\n    let element;\n\n    this.logs[log.id] = log;\n    this.logsCount++;\n\n    if (log.parent) {\n      const index = this.element.getItemIndex(log.parent.element) + log.parent.getChildren().length;\n      this.element.insertItem(index, log.render());\n      element = this.element.getItem(index);\n    } else {\n      element = this.element.add(log.render());\n    }\n    element.logId = log.id;\n    if (this.autoScroll) {\n      this.scrollToBottom();\n    }\n    if (this.logsCount === 1) {\n      this.channel.emit('select log', log);\n    }\n    return element;\n  }\n\n  getSelectedLog() {\n    return this.selectedLog;\n  }\n\n  scrollToBottom() {\n    this.element.move(this.logsCount);\n  }\n\n  getLogFromElement(element) {\n    return this.logs[element.logId];\n  }\n\n  focus() {\n    this.element.focus();\n  }\n}\n","import blessed from 'blessed';\nimport transceiver from 'transceiver';\nimport dateFormat from 'dateformat';\n\nexport default class logDetails {\n  constructor() {\n    this.channel = transceiver.channel('log');\n    this.element = blessed.box({\n      height: 6,\n      left: '0',\n      bottom: 0,\n      tags: true,\n      keys: true,\n      padding: {\n        left: 1,\n        right: 1,\n      },\n      style: {\n        selected: {\n          fg: 'black',\n          bg: 'white',\n          border: {\n            fg: 'white'\n          },\n          hover: {\n            bg: 'green'\n          }\n        }\n      }\n    });\n\n    this.channel.on('select log', this.updateLogDetails.bind(this));\n  }\n\n  updateLogDetails(log) {\n    this.element.setContent(this.renderType(log) + this.renderId(log) + this.renderDate(log) + this.renderDuration(log) + this.renderData(log));\n  }\n\n  renderType(log) {\n    if (log.type === 'root') {\n      return '{magenta-fg}{bold}ROOT NODE{/bold}{/magenta-fg}\\n';\n    }\n    if (log.type === 'success') {\n      return '{green-fg}✔ {bold}SUCCESS{/bold}{/green-fg}\\n';\n    }\n    if (log.type === 'error') {\n      return '{red-fg}✘ {bold}ERROR{/bold}{/red-fg}\\n';\n    }\n    if (log.type === 'warn') {\n      return '{yellow-fg}! {bold}WARN{/bold}{/red-fg}\\n';\n    }\n    if (log.type === 'node') {\n      return '{grey-fg}{bold}NODE{/bold}{/grey-fg}\\n';\n    }\n    if (log.type === 'async') {\n      if (log.status === 'resolved') {\n        return '{bold}{green-fg}ASYNC NODE{/bold} (RESOLVED ✔){/green-fg}\\n';\n      }\n      if (log.status === 'rejected') {\n        return '{bold}{red-fg}ASYNC NODE{/bold} (REJECTED ✘){/red-fg}\\n';\n      }\n      if (log.status === 'pending') {\n        return '{cyan-fg}{bold}ASYNC NODE{/bold} (PENDING ⌛){/cyan-fg}\\n';\n      }\n    }\n    if (log.type === 'info') {\n      return '{white-fg}{bold}INFO{/bold}{/white-fg}\\n';\n    }\n    return '';\n  }\n\n  renderId(log) {\n    return `{bold}ID:{/bold} {underline}${log.id}{/underline}\\n`;\n  }\n\n  renderDate(log) {\n    return `{bold}TIME:{/bold} {magenta-fg}${dateFormat(log.date, 'dddd, mmmm dS yyyy, HH:MM:ss.L')}{/magenta-fg}\\n`;\n  }\n\n  renderDuration(log) {\n    if (log.relativeDuration && log.previousLog) {\n      return `{bold}DURATION:{/bold} {yellow-fg}${log.relativeDuration}{/yellow-fg} (from {underline}${log.previousLog.id}{/underline})\\n`;\n    }\n    return '';\n  }\n\n  renderData(log) {\n    if (log.data) {\n      return `{bold}DATA:{/bold} ${log.renderData()}\\n`;\n    }\n    return '';\n  }\n}\n","import blessed from 'blessed';\nimport transceiver from 'transceiver';\nimport prune from 'json-prune';\nimport path from 'path';\nimport appRoot from 'app-root-path';\n\nimport tree from './tree';\n\nexport default class Inspector {\n  constructor() {\n    this.channel = transceiver.channel('log');\n\n    this.element = tree({\n      top: 'center',\n      left: 'center',\n      width: '90%',\n      height: '75%',\n      hidden: true,\n      label: 'Inspector',\n      tags: true,\n      border: {\n        type: 'line'\n      },\n      style: {\n        fg: 'white',\n        border: {\n          fg: '#f0f0f0'\n        },\n      },\n      template: {\n        extend: '{bold}{green-fg} [+]{/}',\n        retract: '{bold}{yellow-fg} [-]{/}',\n        lines: true,\n      }\n    });\n  }\n\n  open(selectedLog) {\n    if (!selectedLog || !selectedLog.data && !selectedLog.stackTrace) {\n      return;\n    }\n    this.opened = true;\n    this.element.show();\n    this.element.focus();\n    this.element.setData(this.prepareData(selectedLog));\n  }\n\n  close() {\n    this.opened = false;\n    this.element.hide();\n  }\n\n  prepareData(log) {\n    const content = {};\n    if (log.data) {\n      content.data = JSON.parse(prune(log.data, {\n        depthDecr: 7,\n        replacer: (value, defaultValue, circular) => {\n          if (typeof value === 'function') {\n            return '\"Function [pruned]\"';\n          }\n          if (Array.isArray(value)) {\n            return `\"Array (${value.length}) [pruned]\"`;\n          }\n          if (typeof value === 'object') {\n            return '\"Object [pruned]\"';\n          }\n          return defaultValue;\n        }\n      }));\n    }\n\n    if (log.stackTrace) {\n      content['stack trace'] = log.stackTrace.map((callsite) => {\n        const relativePath = path.relative(appRoot.toString(), callsite.file);\n        return {\n          type: callsite.type,\n          function: callsite.function,\n          method: callsite.method,\n          file: `${relativePath}:{yellow-fg}${callsite.line}{/yellow-fg}:{yellow-fg}${callsite.column}{/yellow-fg}`,\n        };\n      });\n    }\n    return this.formatData(content);\n  }\n\n  formatData(data, key, depth = 0) {\n    depth++;\n    if (typeof data === 'object') {\n      if (data !== null) {\n        let name;\n        let extended;\n\n        if (depth === 2) {\n          name = `{yellow-fg}{bold}${key.toUpperCase()}{/bold}{/yellow-fg} {magenta-fg}(${data.length}){/magenta-fg}`;\n          extended = key === 'data';\n        } else {\n          const type = (Array.isArray(data) ? `[Array] {magenta-fg}(${data.length}){/magenta-fg}` : '[Object]');\n          name = `{blue-fg}{bold}${key ? key + ' ' : ''}{/bold}${type}{/blue-fg}`;\n          extended = depth < 4;\n        }\n        const newObj = {\n          children: {},\n          name,\n          extended\n        };\n        Object.keys(data).forEach((key) => {\n          const child = this.formatData(data[key], key, depth);\n          if (child) {\n            newObj.children[key] = child;\n          }\n        });\n        return newObj;\n      }\n    }\n    if (typeof data === 'function') {\n      return {\n        name: `{blue-fg}${key}{/blue-fg}: {red-fg}{bold}[Function]{/}`,\n      };\n    }\n    if (typeof data === 'number') {\n      return {\n        name: `{blue-fg}${key}{/blue-fg}: {yellow-fg}${data}{/}`,\n      };\n    }\n    if (data === null) {\n      return {\n        name: `{blue-fg}${key}{/blue-fg}: {cyan-fg}{bold}null{/}`,\n      };\n    }\n    return {\n      name: `{blue-fg}${key}{/blue-fg}: ${data}`,\n    };\n  }\n}\n","import blessed from 'blessed';\nimport transceiver from 'transceiver';\n\nimport LogsList from './logsList';\nimport LogDetails from './logDetails';\nimport Inspector from './inspector';\n\nexport default class Ui {\n  constructor() {\n    this.channel = transceiver.channel('ui');\n    this.screen = blessed.screen({\n      smartCSR: true\n    });\n\n    this.logsList = new LogsList();\n    this.logDetails = new LogDetails();\n    this.inspector = new Inspector();\n\n    this.separator = blessed.line({\n      bottom: 6,\n      orientation: 'horizontal'\n    });\n\n    this.screen.append(this.logsList.element);\n    this.screen.append(this.logDetails.element);\n    this.screen.append(this.separator);\n    this.screen.append(this.inspector.element);\n\n    this.logsList.element.focus();\n\n    this.screen.key(['q', 'C-c'], function(ch, key) {\n      return process.exit(0);\n    });\n\n    this.screen.key(['i'], this.toggleInspector.bind(this));\n\n    this.screen.render();\n\n    this.channel.reply('render', () => this.screen.render());\n  }\n\n  toggleInspector() {\n    if (this.inspector.opened) {\n      this.inspector.close();\n      this.logsList.focus();\n    } else {\n      this.inspector.open(this.logsList.selectedLog);\n    }\n    this.screen.render();\n  }\n}\n","import blessed from 'blessed';\nimport shortid from 'shortid';\nimport transceiver from 'transceiver';\nimport prune from 'json-prune';\nimport dateFormat from 'dateformat';\n\nexport default class LogItem {\n  constructor({name, type, status, parent, data, message, stackTrace, date = Date.now()}) {\n    this.id = shortid.generate();\n    this.name = name;\n    this.type = type;\n    this.status = status;\n    this.data = data;\n    this.message = message;\n    this.stackTrace = stackTrace;\n    this.date = date;\n    this.children = [];\n    this.channel = transceiver.channel('log');\n\n    if (parent) {\n      this.depth = parent.depth + 1;\n      this.parent = parent;\n      this.previousLog = parent.getLastChild() || parent;\n      this.relativeDuration = this.getRelativeDuration();\n      this.parent.addChild(this);\n    } else {\n      this.depth = 0;\n    }\n    this.element = this.channel.request('addLog', this);\n    this.update();\n  }\n\n  update() {\n    if (this.element) {\n      this.element.content = this.render();\n      transceiver.request('ui', 'render');\n    }\n  }\n\n  render() {\n    let message = `${this.renderState()}${this.renderName()}${this.renderMessage()}${this.renderData()}${this.renderDate()}${this.renderDuration()}`;\n    for (let i = 0; i < this.depth; i++) {\n      message = '    ' + message;\n    }\n    return message;\n  }\n\n  renderState() {\n    if (this.type === 'async' && this.status === 'pending') {\n      return `{cyan-fg}[⌛]{/cyan-fg} `;\n    }\n    if (this.type === 'async' && this.status === 'resolved') {\n      return `{green-fg}[✔]{/green-fg} `;\n    }\n    if (this.type === 'async' && this.status === 'rejected') {\n      return `{red-fg}[✘]{/red-fg} `;\n    }\n    if (this.type === 'success') {\n      return `{green-fg}✔{/green-fg} `;\n    }\n    if (this.type === 'error') {\n      return `{red-fg}✘{/red-fg} `;\n    }\n    if (this.type === 'warn') {\n      return `{yellow-fg}❗{/yellow-fg} `;\n    }\n    if (this.type === 'info') {\n      return '⇢ ';\n    }\n    return '';\n  }\n\n  renderName() {\n    if (this.depth === 0) {\n      return this.name ? `{underline}{bold}${this.name}{/bold}{/underline} ` : '';\n    }\n    if (this.type === 'async') {\n      if (this.status === 'resolved') {\n        return `{bold}{green-fg}${this.name}{/green-fg}{/bold} (async) `;\n      }\n      if (this.status === 'rejected') {\n        return `{bold}{red-fg}${this.name}{/red-fg}{/bold} (async) `;\n      }\n      return `{bold}${this.name}{/bold} (async) `;\n    }\n    if (this.type === 'success') {\n      return this.name ? `{bold}{green-fg}${this.name}{/green-fg}{/bold} ` : '';\n    }\n    if (this.type === 'error') {\n      return this.name ? `{bold}{red-fg}${this.name}{/red-fg}{/bold} ` : '';\n    }\n    if (this.type === 'warn') {\n      return this.name ? `{bold}{yellow-fg}${this.name}{/yellow-fg}{/bold} ` : '';\n    }\n    return this.name ? `{bold}${this.name}{/bold} ` : '';\n  }\n\n  renderData() {\n    if (this.depth === 0) {\n      // console.log(this.data);\n    }\n    if (!this.data) {\n      return '';\n    }\n    if (Array.isArray(this.data)) {\n      return this.data.map(this.renderValue.bind(this)).join(' ') + ' ';\n    }\n    return this.renderValue(this.data) + ' ';\n  }\n\n  renderValue(value) {\n    if (Array.isArray(value)) {\n      return `{cyan-fg}${this.prune(value)}{/cyan-fg}`;\n    }\n    if (typeof value === 'object') {\n      return `{blue-fg}${this.prune(value)}{/blue-fg}`;\n    }\n    if (typeof value === 'function') {\n      return `{red-fg}{bold}[Function]{/bold}{red-fg}`;\n    }\n    if (typeof value === 'number') {\n      return `{yellow-fg}${value}{/yellow-fg}`;\n    }\n    if (typeof value === 'string') {\n      if (this.type === 'success') {\n        return `{green-fg}${value}{/green-fg}`;\n      }\n      if (this.type === 'error') {\n        return `{red-fg}${value}{/red-fg}`;\n      }\n      if (this.type === 'warn') {\n        return `{yellow-fg}${value}{/yellow-fg}`;\n      }\n    }\n    return value;\n  }\n\n  renderMessage() {\n    if (this.message) {\n      if (this.type === 'success') {\n        return `{green-fg}${this.message}{/green-fg} `;\n      }\n      if (this.type === 'error') {\n        return `{red-fg}${this.message}{/red-fg} `;\n      }\n      if (this.type === 'warn') {\n        return `{yellow-fg}${this.message}{/yellow-fg} `;\n      }\n      return `${this.message} `;\n    }\n    return '';\n  }\n\n  renderDate() {\n    if (this.depth === 0) {\n      return `{magenta-fg}(${dateFormat(this.date, 'dd/mm/yyyy HH:MM:ss.L')}){/magenta-fg} `;\n    }\n    return '';\n  }\n\n  renderDuration() {\n    if (this.relativeDuration) {\n      return `{grey-fg}+${this.relativeDuration}{/grey-fg} `;\n    }\n    return '';\n  }\n\n  getRelativeDuration() {\n    return this.humanizeDuration(this.date - this.previousLog.date);\n  }\n\n  humanizeDuration(duration) {\n    if (duration < 1000) {\n      return `${duration}ms`;\n    }\n    if (duration < 60000) {\n      let milliseconds = duration % 1000;\n      milliseconds = ('000' + milliseconds).slice(-3);\n      return `${Math.floor(duration / 1000)}.${milliseconds}s`;\n    }\n    return `${Math.floor(duration / 60000)}m ${Math.round((duration % 60000) / 1000)}s`;\n  }\n\n  addChild(log) {\n    this.children.push(log);\n  }\n\n  getLastChild() {\n    return this.children[this.children.length - 1];\n  }\n\n  getChildren(list) {\n    list = list || [];\n    list.push.apply(list, this.children);\n    this.children.forEach(child => {\n      child.getChildren(list);\n    });\n    return list;\n  }\n\n  setStatus(status) {\n    this.status = status;\n    this.update();\n  }\n\n  prune(value) {\n    return prune(value, {\n      depthDecr: 2,\n      arrayMaxLength: 8,\n      prunedString: ' [...]'\n    });\n  }\n}\n","import shortid from 'shortid';\nimport transceiver from 'transceiver';\nimport stackTrace from 'stack-trace';\n\nimport LogItem from './ui/logItem';\n\nclass Agent {\n  constructor({name, type, status, data, message, isAsync = false, ancestors}) {\n    this.name = name;\n    this.children = {};\n    this.isAsync = isAsync;\n    this.asyncState = this.isAsync ? 'pending' : null;\n    this.type = type;\n    this.status = status;\n\n    if (!ancestors) {\n      this.ancestors = [];\n      this.isRoot = true;\n    } else {\n      this.ancestors = ancestors;\n      this.parent = this.ancestors[this.ancestors.length - 1];\n    }\n\n    this.logItem = new LogItem({\n      name: this.name,\n      type: this.type,\n      status: this.status,\n      parent: this.parent ? this.parent.logItem : null,\n      data: data,\n      message: message,\n      stackTrace: this.generateStackTrace(stackTrace.get()),\n    });\n\n    return this;\n  }\n\n  log(...args) {\n    new Agent({\n      type: 'info',\n      data: args,\n      ancestors: this.ancestors.concat(this)\n    });\n    return this;\n  }\n\n  warn(...args) {\n    new Agent({\n      type: 'warn',\n      data: args,\n      ancestors: this.ancestors.concat(this)\n    });\n    return this;\n  }\n\n  success(...args) {\n    new Agent({\n      type: 'success',\n      data: args,\n      ancestors: this.ancestors.concat(this),\n    });\n    return this;\n  }\n\n  error(...args) {\n    new Agent({\n      type: 'error',\n      data: args,\n      ancestors: this.ancestors.concat(this),\n    });\n    return this;\n  }\n\n  child(name, ...args) {\n    if (!this.children[name]) {\n      this.children[name] = new Agent({\n        name,\n        type: 'node',\n        ancestors: this.ancestors.concat(this),\n      });\n    }\n    if (args.length) {\n      this.children[name].log(...args);\n    }\n    return this.children[name];\n  }\n\n  async(name, ...args) {\n    if (!this.children[name]) {\n      this.children[name] = new Agent({\n        name,\n        type: 'async',\n        status: 'pending',\n        isAsync: true,\n        ancestors: this.ancestors.concat(this),\n      });\n    }\n    if (!this.children[name].isAsync) {\n      this.internalWarn(`Child agent {bold}${name}{/bold} is defined as a non async agent`);\n    }\n    if (args.length) {\n      this.children[name].log(...args);\n    }\n    return this.children[name];\n  }\n\n  resolve(...args) {\n    if (this.isAsync) {\n      if (this.logItem.status === 'pending') {\n        this.logItem.setStatus('resolved');\n        const resolveLog = new Agent({\n          name: this.name,\n          type: 'success',\n          message: 'resolved',\n          ancestors: this.ancestors.concat(this),\n        });\n        if (args.length) {\n          resolveLog.success(...args);\n        }\n      } else {\n        this.internalWarn(`Trying to resolve an already {bold}${this.logItem.status}{/bold} async agent`);\n      }\n    } else {\n      this.internalWarn('Trying to resolve a non async agent');\n    }\n    return this;\n  }\n\n  reject(...args) {\n    if (this.isAsync) {\n      if (this.logItem.status === 'pending') {\n        this.logItem.setStatus('rejected');\n        const rejectLog = new Agent({\n          name: this.name,\n          type: 'error',\n          message: 'rejected',\n          ancestors: this.ancestors.concat(this),\n        });\n        if (args.length) {\n          rejectLog.error(...args);\n        }\n      } else {\n        this.internalWarn(`Trying to reject an already {bold}${this.logItem.status}{/bold} async agent`);\n      }\n    } else {\n      this.internalWarn('Trying to reject a non async agent');\n    }\n    return this;\n  }\n\n  internalWarn(message) {\n    new Agent({\n      name: this.name,\n      type: 'warn',\n      message,\n      ancestors: this.ancestors.concat(this),\n    });\n  }\n\n  getAncestorsNames() {\n    return this.ancestors.map(ancestor => ancestor.name);\n  }\n\n  generateStackTrace(trace) {\n    const stackTrace = [];\n    for (let i = 0; i < 5; i++) {\n      stackTrace.push({\n        type: trace[i].getTypeName(),\n        function: trace[i].getFunctionName(),\n        method: trace[i].getMethodName(),\n        file: trace[i].getFileName(),\n        line: trace[i].getLineNumber(),\n        column: trace[i].getColumnNumber(),\n      });\n    }\n    return stackTrace;\n  }\n}\n\nexport default function(name, ...args) {\n  return new Agent({\n    name,\n    type: 'root',\n    data: args.length ? args : undefined,\n  });\n};\n","import transceiver from 'transceiver';\n\nimport Ui from './ui';\nimport agent from './agent';\n\ntransceiver.setPromise(null);\n\nconst ui = new Ui();\n\nexport default {ui, agent};\n"],"sourceRoot":"/source/"}